
FreeRTOS-Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007964  08007964  00008964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a60  08007a60  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007a60  08007a60  00008a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a68  08007a68  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a68  08007a68  00008a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a6c  08007a6c  00008a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007a70  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b5c  20000068  08007ad8  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bc4  08007ad8  00009bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fa1  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a8  00000000  00000000  00023039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  000267e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f1  00000000  00000000  00027f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c9b  00000000  00000000  000290f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a080  00000000  00000000  0002dd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe90c  00000000  00000000  00047e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146720  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067b8  00000000  00000000  00146764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014cf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800794c 	.word	0x0800794c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800794c 	.word	0x0800794c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80004c4:	f000 fbaa 	bl	8000c1c <HAL_Init>
  SystemClock_Config();
 80004c8:	f000 f838 	bl	800053c <SystemClock_Config>
  MX_GPIO_Init();
 80004cc:	f000 f8b8 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f886 	bl	80005e0 <MX_USART2_UART_Init>

  /* Init scheduler */
  osKernelInitialize();
 80004d4:	f003 fa14 	bl	8003900 <osKernelInitialize>

  // Create the mutex
  myMutex = osMutexNew(NULL);
 80004d8:	2000      	movs	r0, #0
 80004da:	f003 fb08 	bl	8003aee <osMutexNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0e      	ldr	r2, [pc, #56]	@ (800051c <main+0x5c>)
 80004e2:	6013      	str	r3, [r2, #0]
  if (myMutex == NULL) {
      // Handle error, mutex creation failed
  }

  // Create a queue with space for 10 messages of size int
  myQueue = osMessageQueueNew(10, sizeof(int), NULL);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2104      	movs	r1, #4
 80004e8:	200a      	movs	r0, #10
 80004ea:	f003 fc0e 	bl	8003d0a <osMessageQueueNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000520 <main+0x60>)
 80004f2:	6013      	str	r3, [r2, #0]
  if (myQueue == NULL) {
      // Handle error, queue creation failed
  }

  /* Create the thread(s) */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80004f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <main+0x64>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480b      	ldr	r0, [pc, #44]	@ (8000528 <main+0x68>)
 80004fa:	f003 fa4b 	bl	8003994 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <main+0x6c>)
 8000502:	6013      	str	r3, [r2, #0]
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000504:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <main+0x70>)
 8000506:	2100      	movs	r1, #0
 8000508:	480a      	ldr	r0, [pc, #40]	@ (8000534 <main+0x74>)
 800050a:	f003 fa43 	bl	8003994 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a09      	ldr	r2, [pc, #36]	@ (8000538 <main+0x78>)
 8000512:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8000514:	f003 fa18 	bl	8003948 <osKernelStart>

  /* Infinite loop */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <main+0x58>
 800051c:	20000118 	.word	0x20000118
 8000520:	2000010c 	.word	0x2000010c
 8000524:	080079d0 	.word	0x080079d0
 8000528:	080006ed 	.word	0x080006ed
 800052c:	20000110 	.word	0x20000110
 8000530:	080079f4 	.word	0x080079f4
 8000534:	08000741 	.word	0x08000741
 8000538:	20000114 	.word	0x20000114

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	@ 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2244      	movs	r2, #68	@ 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 ff3c 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000562:	f000 fe53 	bl	800120c <HAL_PWREx_ControlVoltageScaling>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800056c:	f000 f918 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2310      	movs	r3, #16
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058a:	230a      	movs	r3, #10
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058e:	2307      	movs	r3, #7
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fe8a 	bl	80012b8 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005aa:	f000 f8f9 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2303      	movs	r3, #3
 80005b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fa52 	bl	8001a70 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d2:	f000 f8e5 	bl	80007a0 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3758      	adds	r7, #88	@ 0x58
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005e6:	4a15      	ldr	r2, [pc, #84]	@ (800063c <MX_USART2_UART_Init+0x5c>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ea:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_USART2_UART_Init+0x58>)
 8000624:	f002 fc06 	bl	8002e34 <HAL_UART_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800062e:	f000 f8b7 	bl	80007a0 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000084 	.word	0x20000084
 800063c:	40004400 	.word	0x40004400

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a23      	ldr	r2, [pc, #140]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a1d      	ldr	r2, [pc, #116]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a11      	ldr	r2, [pc, #68]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_GPIO_Init+0xa8>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // LED PA5
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f000 fd65 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 (LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006c2:	2320      	movs	r3, #32
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006dc:	f000 fbac 	bl	8000e38 <HAL_GPIO_Init>
}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  int msg = 1;  // Message to be sent
 80006f4:	2301      	movs	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    // Send the message to the queue
    osMessageQueuePut(myQueue, &msg, 0, 0);
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <StartTask1+0x48>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	2300      	movs	r3, #0
 8000702:	2200      	movs	r2, #0
 8000704:	f003 fb74 	bl	8003df0 <osMessageQueuePut>

    osMutexAcquire(myMutex, osWaitForever);
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <StartTask1+0x4c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fa72 	bl	8003bfa <osMutexAcquire>
    printf("Task-1 sent message\r\n");
 8000716:	4809      	ldr	r0, [pc, #36]	@ (800073c <StartTask1+0x50>)
 8000718:	f006 fd76 	bl	8007208 <puts>
    osMutexRelease(myMutex);
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <StartTask1+0x4c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fab5 	bl	8003c90 <osMutexRelease>

    osDelay(1000);  // Delay 1 second
 8000726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072a:	f003 f9c5 	bl	8003ab8 <osDelay>
    osMessageQueuePut(myQueue, &msg, 0, 0);
 800072e:	bf00      	nop
 8000730:	e7e2      	b.n	80006f8 <StartTask1+0xc>
 8000732:	bf00      	nop
 8000734:	2000010c 	.word	0x2000010c
 8000738:	20000118 	.word	0x20000118
 800073c:	08007974 	.word	0x08007974

08000740 <StartTask2>:
  * @param argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  int receivedMsg;

  for(;;)
  {
    // Wait to receive the message from the queue
    if (osMessageQueueGet(myQueue, &receivedMsg, NULL, osWaitForever) == osOK)
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <StartTask2+0x54>)
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	f107 010c 	add.w	r1, r7, #12
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	2200      	movs	r2, #0
 8000756:	f003 fbab 	bl	8003eb0 <osMessageQueueGet>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d113      	bne.n	8000788 <StartTask2+0x48>
    {
      // Toggle the LED (PA5)
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000760:	2120      	movs	r1, #32
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f000 fd29 	bl	80011bc <HAL_GPIO_TogglePin>

      osMutexAcquire(myMutex, osWaitForever);
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <StartTask2+0x58>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f04f 31ff 	mov.w	r1, #4294967295
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fa41 	bl	8003bfa <osMutexAcquire>
      printf("Task-2 received message and toggled LED\r\n");
 8000778:	4808      	ldr	r0, [pc, #32]	@ (800079c <StartTask2+0x5c>)
 800077a:	f006 fd45 	bl	8007208 <puts>
      osMutexRelease(myMutex);
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <StartTask2+0x58>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fa84 	bl	8003c90 <osMutexRelease>
    }

    osDelay(1000);  // Delay 1 second
 8000788:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078c:	f003 f994 	bl	8003ab8 <osDelay>
    if (osMessageQueueGet(myQueue, &receivedMsg, NULL, osWaitForever) == osOK)
 8000790:	e7da      	b.n	8000748 <StartTask2+0x8>
 8000792:	bf00      	nop
 8000794:	2000010c 	.word	0x2000010c
 8000798:	20000118 	.word	0x20000118
 800079c:	0800798c 	.word	0x0800798c

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	f06f 0001 	mvn.w	r0, #1
 80007ea:	f000 fafb 	bl	8000de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ac      	sub	sp, #176	@ 0xb0
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2288      	movs	r2, #136	@ 0x88
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f006 fdd3 	bl	80073c8 <memset>
  if(huart->Instance==USART2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <HAL_UART_MspInit+0xb0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d13b      	bne.n	80008a4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800082c:	2302      	movs	r3, #2
 800082e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000830:	2300      	movs	r3, #0
 8000832:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fb6f 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000844:	f7ff ffac 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <HAL_UART_MspInit+0xb4>)
 800084a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084c:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <HAL_UART_MspInit+0xb4>)
 800084e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000852:	6593      	str	r3, [r2, #88]	@ 0x58
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <HAL_UART_MspInit+0xb4>)
 8000856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <HAL_UART_MspInit+0xb4>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000864:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <HAL_UART_MspInit+0xb4>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086c:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <HAL_UART_MspInit+0xb4>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000878:	230c      	movs	r3, #12
 800087a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000890:	2307      	movs	r3, #7
 8000892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f000 faca 	bl	8000e38 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008a4:	bf00      	nop
 80008a6:	37b0      	adds	r7, #176	@ 0xb0
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	@ 0x38
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008c2:	4b34      	ldr	r3, [pc, #208]	@ (8000994 <HAL_InitTick+0xe0>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	4a33      	ldr	r2, [pc, #204]	@ (8000994 <HAL_InitTick+0xe0>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ce:	4b31      	ldr	r3, [pc, #196]	@ (8000994 <HAL_InitTick+0xe0>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008da:	f107 0210 	add.w	r2, r7, #16
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fa87 	bl	8001df8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d103      	bne.n	80008fc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f4:	f001 fa54 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 80008f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80008fa:	e004      	b.n	8000906 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008fc:	f001 fa50 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8000900:	4603      	mov	r3, r0
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000908:	4a23      	ldr	r2, [pc, #140]	@ (8000998 <HAL_InitTick+0xe4>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	0c9b      	lsrs	r3, r3, #18
 8000910:	3b01      	subs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <HAL_InitTick+0xe8>)
 8000916:	4a22      	ldr	r2, [pc, #136]	@ (80009a0 <HAL_InitTick+0xec>)
 8000918:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <HAL_InitTick+0xe8>)
 800091c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000920:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000922:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <HAL_InitTick+0xe8>)
 8000924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000926:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <HAL_InitTick+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <HAL_InitTick+0xe8>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b19      	ldr	r3, [pc, #100]	@ (800099c <HAL_InitTick+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800093a:	4818      	ldr	r0, [pc, #96]	@ (800099c <HAL_InitTick+0xe8>)
 800093c:	f001 ffaa 	bl	8002894 <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000946:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800094a:	2b00      	cmp	r3, #0
 800094c:	d11b      	bne.n	8000986 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800094e:	4813      	ldr	r0, [pc, #76]	@ (800099c <HAL_InitTick+0xe8>)
 8000950:	f002 f802 	bl	8002958 <HAL_TIM_Base_Start_IT>
 8000954:	4603      	mov	r3, r0
 8000956:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800095a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800095e:	2b00      	cmp	r3, #0
 8000960:	d111      	bne.n	8000986 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000962:	2036      	movs	r0, #54	@ 0x36
 8000964:	f000 fa5a 	bl	8000e1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b0f      	cmp	r3, #15
 800096c:	d808      	bhi.n	8000980 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800096e:	2200      	movs	r2, #0
 8000970:	6879      	ldr	r1, [r7, #4]
 8000972:	2036      	movs	r0, #54	@ 0x36
 8000974:	f000 fa36 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000978:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <HAL_InitTick+0xf0>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
 800097e:	e002      	b.n	8000986 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000986:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800098a:	4618      	mov	r0, r3
 800098c:	3738      	adds	r7, #56	@ 0x38
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	431bde83 	.word	0x431bde83
 800099c:	2000011c 	.word	0x2000011c
 80009a0:	40001000 	.word	0x40001000
 80009a4:	20000004 	.word	0x20000004

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <MemManage_Handler+0x4>

080009c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <UsageFault_Handler+0x4>

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <TIM6_DAC_IRQHandler+0x10>)
 80009e6:	f002 f827 	bl	8002a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000011c 	.word	0x2000011c

080009f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d013      	beq.n	8000a34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000a14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00b      	beq.n	8000a34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a1c:	e000      	b.n	8000a20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f9      	beq.n	8000a1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a2a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_write>:
#include "stm32l4xx_hal.h"
// ITM Port definitions
#define ITM_STIMULUS_PORT0    (*(volatile unsigned int*)0xE0000000)
#define ITM_TRACE_EN          (*(volatile unsigned int*)0xE0000E00)

int _write(int file, char *ptr, int len) {
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e017      	b.n	8000a84 <_write+0x42>
        if (ITM->TCR & ITM_TCR_ITMENA_Msk) {  // Check if ITM is enabled
 8000a54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00c      	beq.n	8000a7e <_write+0x3c>
            while (ITM->PORT[0].u32 == 0);  // Wait until the ITM port is ready
 8000a64:	bf00      	nop
 8000a66:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0fa      	beq.n	8000a66 <_write+0x24>
            ITM_SendChar(*ptr++);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffbb 	bl	80009f4 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbe3      	blt.n	8000a54 <_write+0x12>
        }
    }
    return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e00a      	b.n	8000abe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa8:	f3af 8000 	nop.w
 8000aac:	4601      	mov	r1, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	60ba      	str	r2, [r7, #8]
 8000ab4:	b2ca      	uxtb	r2, r1
 8000ab6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	dbf0      	blt.n	8000aa8 <_read+0x12>
  }

  return len;
 8000ac6:	687b      	ldr	r3, [r7, #4]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_close>:


int _close(int file)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af8:	605a      	str	r2, [r3, #4]
  return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_isatty>:

int _isatty(int file)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b10:	2301      	movs	r3, #1
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f006 fc7c 	bl	8007464 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20018000 	.word	0x20018000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000168 	.word	0x20000168
 8000ba0:	20001bc8 	.word	0x20001bc8

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f006 fc3b 	bl	8007470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fc61 	bl	80004c0 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c0c:	08007a70 	.word	0x08007a70
  ldr r2, =_sbss
 8000c10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c14:	20001bc4 	.word	0x20001bc4

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <HAL_Init+0x3c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_Init+0x3c>)
 8000c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f8cb 	bl	8000dce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c38:	200f      	movs	r0, #15
 8000c3a:	f7ff fe3b 	bl	80008b4 <HAL_InitTick>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	e001      	b.n	8000c4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4a:	f7ff fdaf 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	2000016c 	.word	0x2000016c

08000c74 <__NVIC_SetPriorityGrouping>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	@ 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff4c 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df6:	f7ff ff61 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000dfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f7ff ffb1 	bl	8000d68 <NVIC_EncodePriority>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff80 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff54 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e17f      	b.n	8001148 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8171 	beq.w	8001142 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d118      	bne.n	8000f18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80ac 	beq.w	8001142 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b5f      	ldr	r3, [pc, #380]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	4a5e      	ldr	r2, [pc, #376]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8001168 <HAL_GPIO_Init+0x330>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001002:	4a5a      	ldr	r2, [pc, #360]	@ (800116c <HAL_GPIO_Init+0x334>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x242>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4f      	ldr	r2, [pc, #316]	@ (8001170 <HAL_GPIO_Init+0x338>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x23e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4e      	ldr	r2, [pc, #312]	@ (8001174 <HAL_GPIO_Init+0x33c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x23a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4d      	ldr	r2, [pc, #308]	@ (8001178 <HAL_GPIO_Init+0x340>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x236>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4c      	ldr	r2, [pc, #304]	@ (800117c <HAL_GPIO_Init+0x344>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x232>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4b      	ldr	r2, [pc, #300]	@ (8001180 <HAL_GPIO_Init+0x348>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x22e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4a      	ldr	r2, [pc, #296]	@ (8001184 <HAL_GPIO_Init+0x34c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x22a>
 800105e:	2306      	movs	r3, #6
 8001060:	e00c      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001062:	2307      	movs	r3, #7
 8001064:	e00a      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001066:	2305      	movs	r3, #5
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x244>
 800106a:	2304      	movs	r3, #4
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x244>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x244>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x244>
 800107a:	2300      	movs	r3, #0
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108c:	4937      	ldr	r1, [pc, #220]	@ (800116c <HAL_GPIO_Init+0x334>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109a:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010be:	4a32      	ldr	r2, [pc, #200]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c4:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e8:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ee:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <HAL_GPIO_Init+0x350>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001112:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <HAL_GPIO_Init+0x350>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001118:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <HAL_GPIO_Init+0x350>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae78 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48001000 	.word	0x48001000
 8001180:	48001400 	.word	0x48001400
 8001184:	48001800 	.word	0x48001800
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43d9      	mvns	r1, r3
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	400b      	ands	r3, r1
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40007000 	.word	0x40007000

0800120c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800121a:	d130      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001228:	d038      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123a:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2232      	movs	r2, #50	@ 0x32
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001250:	e002      	b.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001264:	d102      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f2      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001278:	d110      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e00f      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128a:	d007      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001294:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800129a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000
 80012b0:	20000000 	.word	0x20000000
 80012b4:	431bde83 	.word	0x431bde83

080012b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3ca      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ca:	4b97      	ldr	r3, [pc, #604]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d4:	4b94      	ldr	r3, [pc, #592]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80e4 	beq.w	80014b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_OscConfig+0x4a>
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	f040 808b 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 8087 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001302:	4b89      	ldr	r3, [pc, #548]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x62>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3a2      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	4b82      	ldr	r3, [pc, #520]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_RCC_OscConfig+0x7c>
 800132a:	4b7f      	ldr	r3, [pc, #508]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001332:	e005      	b.n	8001340 <HAL_RCC_OscConfig+0x88>
 8001334:	4b7c      	ldr	r3, [pc, #496]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001340:	4293      	cmp	r3, r2
 8001342:	d223      	bcs.n	800138c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fd87 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e383      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001358:	4b73      	ldr	r3, [pc, #460]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a72      	ldr	r2, [pc, #456]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b70      	ldr	r3, [pc, #448]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	496d      	ldr	r1, [pc, #436]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001376:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4968      	ldr	r1, [pc, #416]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
 800138a:	e025      	b.n	80013d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b66      	ldr	r3, [pc, #408]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4960      	ldr	r1, [pc, #384]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	495b      	ldr	r1, [pc, #364]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fd47 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e343      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d8:	f000 fc4a 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b52      	ldr	r3, [pc, #328]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4950      	ldr	r1, [pc, #320]	@ (800152c <HAL_RCC_OscConfig+0x274>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_RCC_OscConfig+0x278>)
 80013f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fa59 	bl	80008b4 <HAL_InitTick>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d052      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	e327      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d032      	beq.n	800147e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001418:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a42      	ldr	r2, [pc, #264]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001424:	f7ff fc1a 	bl	8000c5c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142c:	f7ff fc16 	bl	8000c5c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e310      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143e:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b37      	ldr	r3, [pc, #220]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a36      	ldr	r2, [pc, #216]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4931      	ldr	r1, [pc, #196]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001468:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	492c      	ldr	r1, [pc, #176]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e01a      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147e:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148a:	f7ff fbe7 	bl	8000c5c <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001492:	f7ff fbe3 	bl	8000c5c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2dd      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a4:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x1da>
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d074      	beq.n	80015aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x21a>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d064      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d160      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e2ba      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x24a>
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e026      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800150a:	d115      	bne.n	8001538 <HAL_RCC_OscConfig+0x280>
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001512:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a02      	ldr	r2, [pc, #8]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e014      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	08007a18 	.word	0x08007a18
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
 8001538:	4ba0      	ldr	r3, [pc, #640]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a9f      	ldr	r2, [pc, #636]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b9d      	ldr	r3, [pc, #628]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a9c      	ldr	r2, [pc, #624]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb80 	bl	8000c5c <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb7c 	bl	8000c5c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e276      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4b92      	ldr	r3, [pc, #584]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2a8>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb6c 	bl	8000c5c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb68 	bl	8000c5c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e262      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4b88      	ldr	r3, [pc, #544]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d060      	beq.n	8001678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x310>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d116      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x328>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e23f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b76      	ldr	r3, [pc, #472]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	4973      	ldr	r1, [pc, #460]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	e040      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b6f      	ldr	r3, [pc, #444]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb27 	bl	8000c5c <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb23 	bl	8000c5c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e21d      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	4b65      	ldr	r3, [pc, #404]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b62      	ldr	r3, [pc, #392]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	495f      	ldr	r1, [pc, #380]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a5c      	ldr	r2, [pc, #368]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800164c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fb03 	bl	8000c5c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff faff 	bl	8000c5c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1f9      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	4b53      	ldr	r3, [pc, #332]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03c      	beq.n	80016fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168c:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	4a4a      	ldr	r2, [pc, #296]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fade 	bl	8000c5c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fada 	bl	8000c5c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1d4      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3ec>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016cc:	4a3b      	ldr	r2, [pc, #236]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fac1 	bl	8000c5c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fabd 	bl	8000c5c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1b7      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	4b32      	ldr	r3, [pc, #200]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	4a26      	ldr	r2, [pc, #152]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	@ 0x58
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d118      	bne.n	8001776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001750:	f7ff fa84 	bl	8000c5c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff fa80 	bl	8000c5c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e17a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x4d8>
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178e:	e029      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_OscConfig+0x50c>
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179e:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ca:	4a9b      	ldr	r2, [pc, #620]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d4:	4b98      	ldr	r3, [pc, #608]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017da:	4a97      	ldr	r2, [pc, #604]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d016      	beq.n	800181a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fa36 	bl	8000c5c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa32 	bl	8000c5c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e12a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ed      	beq.n	80017f4 <HAL_RCC_OscConfig+0x53c>
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fa1f 	bl	8000c5c <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fa1b 	bl	8000c5c <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e113      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	4b7f      	ldr	r3, [pc, #508]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ed      	bne.n	8001822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	4a79      	ldr	r2, [pc, #484]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80fe 	beq.w	8001a5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	2b02      	cmp	r3, #2
 8001868:	f040 80d0 	bne.w	8001a0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800186c:	4b72      	ldr	r3, [pc, #456]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	429a      	cmp	r2, r3
 800187e:	d130      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	3b01      	subs	r3, #1
 800188c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d127      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11f      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018ac:	2a07      	cmp	r2, #7
 80018ae:	bf14      	ite	ne
 80018b0:	2201      	movne	r2, #1
 80018b2:	2200      	moveq	r2, #0
 80018b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d06e      	beq.n	80019c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d069      	beq.n	80019bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018f4:	4b50      	ldr	r3, [pc, #320]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0ad      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001904:	4b4c      	ldr	r3, [pc, #304]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a4b      	ldr	r2, [pc, #300]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800190a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001910:	f7ff f9a4 	bl	8000c5c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f9a0 	bl	8000c5c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e09a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	4b43      	ldr	r3, [pc, #268]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	4b40      	ldr	r3, [pc, #256]	@ (8001a3c <HAL_RCC_OscConfig+0x784>)
 800193c:	4013      	ands	r3, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001946:	3a01      	subs	r2, #1
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001950:	0212      	lsls	r2, r2, #8
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001958:	0852      	lsrs	r2, r2, #1
 800195a:	3a01      	subs	r2, #1
 800195c:	0552      	lsls	r2, r2, #21
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	3a01      	subs	r2, #1
 8001968:	0652      	lsls	r2, r2, #25
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001970:	0912      	lsrs	r2, r2, #4
 8001972:	0452      	lsls	r2, r2, #17
 8001974:	430a      	orrs	r2, r1
 8001976:	4930      	ldr	r1, [pc, #192]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800197c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2d      	ldr	r2, [pc, #180]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001994:	f7ff f962 	bl	8000c5c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f95e 	bl	8000c5c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e058      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ba:	e050      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e04f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d148      	bne.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a16      	ldr	r2, [pc, #88]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e4:	f7ff f93a 	bl	8000c5c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f936 	bl	8000c5c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e030      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x734>
 8001a0a:	e028      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d023      	beq.n	8001a5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a08      	ldr	r2, [pc, #32]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f91d 	bl	8000c5c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e00c      	b.n	8001a40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f919 	bl	8000c5c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d905      	bls.n	8001a40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e013      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ec      	bne.n	8001a26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4905      	ldr	r1, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x7b4>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	feeefffc 	.word	0xfeeefffc

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0e7      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b75      	ldr	r3, [pc, #468]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b72      	ldr	r3, [pc, #456]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4970      	ldr	r1, [pc, #448]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cf      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b66      	ldr	r3, [pc, #408]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4960      	ldr	r1, [pc, #384]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04c      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d121      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0a6      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	4b54      	ldr	r3, [pc, #336]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e09a      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b26:	4b4e      	ldr	r3, [pc, #312]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e08e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b36:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e086      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4943      	ldr	r1, [pc, #268]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff f880 	bl	8000c5c <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f87c 	bl	8000c5c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e06e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d208      	bcs.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	492b      	ldr	r1, [pc, #172]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d210      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0207 	bic.w	r2, r3, #7
 8001bcc:	4923      	ldr	r1, [pc, #140]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e036      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4918      	ldr	r1, [pc, #96]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4910      	ldr	r1, [pc, #64]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c24:	f000 f824 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	490b      	ldr	r1, [pc, #44]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f4>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1fc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fe33 	bl	80008b4 <HAL_InitTick>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08007a18 	.word	0x08007a18
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d121      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11e      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca4:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	e004      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d134      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d003      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xac>
 8001d14:	e005      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	e005      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e002      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	fb03 f202 	mul.w	r2, r3, r2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	0e5b      	lsrs	r3, r3, #25
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d68:	69bb      	ldr	r3, [r7, #24]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08007a30 	.word	0x08007a30
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4904      	ldr	r1, [pc, #16]	@ (8001dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08007a28 	.word	0x08007a28

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd0:	f7ff ffda 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4904      	ldr	r1, [pc, #16]	@ (8001df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08007a28 	.word	0x08007a28

08001df8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	220f      	movs	r2, #15
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_RCC_GetClockConfig+0x60>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0207 	and.w	r2, r3, #7
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	601a      	str	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40022000 	.word	0x40022000

08001e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e74:	f7ff f9bc 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e78:	6178      	str	r0, [r7, #20]
 8001e7a:	e014      	b.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	4a24      	ldr	r2, [pc, #144]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e94:	f7ff f9ac 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eac:	d10b      	bne.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	@ 0x80
 8001eb2:	d919      	bls.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eb8:	d902      	bls.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e013      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e010      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	@ 0x80
 8001eca:	d902      	bls.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ecc:	2303      	movs	r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e00a      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	@ 0x80
 8001ed6:	d102      	bne.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e004      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b70      	cmp	r3, #112	@ 0x70
 8001ee2:	d101      	bne.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0207 	bic.w	r2, r3, #7
 8001ef0:	4909      	ldr	r1, [pc, #36]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f28:	2300      	movs	r3, #0
 8001f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d041      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f40:	d02a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f46:	d824      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f4c:	d008      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f52:	d81e      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f5e:	e018      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f60:	4b86      	ldr	r3, [pc, #536]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a85      	ldr	r2, [pc, #532]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6c:	e015      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fabb 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f7e:	e00c      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3320      	adds	r3, #32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fba6 	bl	80026d8 <RCCEx_PLLSAI2_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f90:	e003      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	74fb      	strb	r3, [r7, #19]
      break;
 8001f96:	e000      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fa0:	4b76      	ldr	r3, [pc, #472]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fae:	4973      	ldr	r1, [pc, #460]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fb6:	e001      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fec:	d010      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff0:	4b62      	ldr	r3, [pc, #392]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a61      	ldr	r2, [pc, #388]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fa73 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3320      	adds	r3, #32
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fb5e 	bl	80026d8 <RCCEx_PLLSAI2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002030:	4b52      	ldr	r3, [pc, #328]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800203e:	494f      	ldr	r1, [pc, #316]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a0 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b41      	ldr	r3, [pc, #260]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	4a40      	ldr	r2, [pc, #256]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002080:	4b3e      	ldr	r3, [pc, #248]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208c:	2301      	movs	r3, #1
 800208e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4b3b      	ldr	r3, [pc, #236]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3a      	ldr	r2, [pc, #232]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800209c:	f7fe fdde 	bl	8000c5c <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020a2:	e009      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a4:	f7fe fdda 	bl	8000c5c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d902      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	74fb      	strb	r3, [r7, #19]
        break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b8:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ef      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d15c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ca:	4b2c      	ldr	r3, [pc, #176]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01f      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d019      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e8:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f4:	4b21      	ldr	r3, [pc, #132]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fa:	4a20      	ldr	r2, [pc, #128]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002104:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fd99 	bl	8000c5c <HAL_GetTick>
 800212a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	e00b      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fd95 	bl	8000c5c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d902      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	74fb      	strb	r3, [r7, #19]
            break;
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ec      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800216a:	4904      	ldr	r1, [pc, #16]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002172:	e009      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
 8002178:	e006      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002188:	7c7b      	ldrb	r3, [r7, #17]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b9e      	ldr	r3, [pc, #632]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	4a9d      	ldr	r2, [pc, #628]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a6:	4b98      	ldr	r3, [pc, #608]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ac:	f023 0203 	bic.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b4:	4994      	ldr	r1, [pc, #592]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f023 020c 	bic.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	498c      	ldr	r1, [pc, #560]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ea:	4b87      	ldr	r3, [pc, #540]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	4983      	ldr	r1, [pc, #524]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800220c:	4b7e      	ldr	r3, [pc, #504]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	497b      	ldr	r1, [pc, #492]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800222e:	4b76      	ldr	r3, [pc, #472]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223c:	4972      	ldr	r1, [pc, #456]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002250:	4b6d      	ldr	r3, [pc, #436]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	496a      	ldr	r1, [pc, #424]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4b65      	ldr	r3, [pc, #404]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	4961      	ldr	r1, [pc, #388]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002294:	4b5c      	ldr	r3, [pc, #368]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a2:	4959      	ldr	r1, [pc, #356]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b6:	4b54      	ldr	r3, [pc, #336]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c4:	4950      	ldr	r1, [pc, #320]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	4948      	ldr	r1, [pc, #288]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fa:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002300:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	493f      	ldr	r1, [pc, #252]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d028      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800231c:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800232a:	4937      	ldr	r1, [pc, #220]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800233a:	d106      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b32      	ldr	r3, [pc, #200]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a31      	ldr	r2, [pc, #196]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002346:	60d3      	str	r3, [r2, #12]
 8002348:	e011      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002352:	d10c      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	2101      	movs	r1, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f8c8 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d028      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800237a:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002380:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	491f      	ldr	r1, [pc, #124]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002398:	d106      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800239a:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4a1a      	ldr	r2, [pc, #104]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a4:	60d3      	str	r3, [r2, #12]
 80023a6:	e011      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f899 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02b      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023f6:	d109      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a02      	ldr	r2, [pc, #8]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002402:	60d3      	str	r3, [r2, #12]
 8002404:	e014      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002410:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002414:	d10c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f867 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 8002422:	4603      	mov	r3, r0
 8002424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d02f      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800244a:	4928      	ldr	r1, [pc, #160]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800245a:	d10d      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	2102      	movs	r1, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f844 	bl	80024f0 <RCCEx_PLLSAI1_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	74bb      	strb	r3, [r7, #18]
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800247c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3320      	adds	r3, #32
 8002486:	2102      	movs	r1, #2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f925 	bl	80026d8 <RCCEx_PLLSAI2_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024b6:	490d      	ldr	r1, [pc, #52]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024da:	4904      	ldr	r1, [pc, #16]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000

080024f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024fe:	4b75      	ldr	r3, [pc, #468]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d018      	beq.n	800253c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800250a:	4b72      	ldr	r3, [pc, #456]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d10d      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
       ||
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002522:	4b6c      	ldr	r3, [pc, #432]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
       ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d047      	beq.n	80025c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e044      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d018      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0x86>
 8002544:	2b03      	cmp	r3, #3
 8002546:	d825      	bhi.n	8002594 <RCCEx_PLLSAI1_Config+0xa4>
 8002548:	2b01      	cmp	r3, #1
 800254a:	d002      	beq.n	8002552 <RCCEx_PLLSAI1_Config+0x62>
 800254c:	2b02      	cmp	r3, #2
 800254e:	d009      	beq.n	8002564 <RCCEx_PLLSAI1_Config+0x74>
 8002550:	e020      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002552:	4b60      	ldr	r3, [pc, #384]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d11d      	bne.n	800259a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002562:	e01a      	b.n	800259a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002564:	4b5b      	ldr	r3, [pc, #364]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002574:	e013      	b.n	800259e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002576:	4b57      	ldr	r3, [pc, #348]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002582:	4b54      	ldr	r3, [pc, #336]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002592:	e006      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e004      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259a:	bf00      	nop
 800259c:	e002      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259e:	bf00      	nop
 80025a0:	e000      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025aa:	4b4a      	ldr	r3, [pc, #296]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	430b      	orrs	r3, r1
 80025c0:	4944      	ldr	r1, [pc, #272]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d17d      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025cc:	4b41      	ldr	r3, [pc, #260]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a40      	ldr	r2, [pc, #256]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d8:	f7fe fb40 	bl	8000c5c <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025de:	e009      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e0:	f7fe fb3c 	bl	8000c5c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	73fb      	strb	r3, [r7, #15]
        break;
 80025f2:	e005      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f4:	4b37      	ldr	r3, [pc, #220]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ef      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d160      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800260c:	4b31      	ldr	r3, [pc, #196]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	0211      	lsls	r1, r2, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	0912      	lsrs	r2, r2, #4
 8002624:	0452      	lsls	r2, r2, #17
 8002626:	430a      	orrs	r2, r1
 8002628:	492a      	ldr	r1, [pc, #168]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	610b      	str	r3, [r1, #16]
 800262e:	e027      	b.n	8002680 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d112      	bne.n	800265c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002636:	4b27      	ldr	r3, [pc, #156]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800263e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6892      	ldr	r2, [r2, #8]
 8002646:	0211      	lsls	r1, r2, #8
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6912      	ldr	r2, [r2, #16]
 800264c:	0852      	lsrs	r2, r2, #1
 800264e:	3a01      	subs	r2, #1
 8002650:	0552      	lsls	r2, r2, #21
 8002652:	430a      	orrs	r2, r1
 8002654:	491f      	ldr	r1, [pc, #124]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	610b      	str	r3, [r1, #16]
 800265a:	e011      	b.n	8002680 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265c:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002664:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6892      	ldr	r2, [r2, #8]
 800266c:	0211      	lsls	r1, r2, #8
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6952      	ldr	r2, [r2, #20]
 8002672:	0852      	lsrs	r2, r2, #1
 8002674:	3a01      	subs	r2, #1
 8002676:	0652      	lsls	r2, r2, #25
 8002678:	430a      	orrs	r2, r1
 800267a:	4916      	ldr	r1, [pc, #88]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a13      	ldr	r2, [pc, #76]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800268a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fae6 	bl	8000c5c <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002692:	e009      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002694:	f7fe fae2 	bl	8000c5c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d902      	bls.n	80026a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	73fb      	strb	r3, [r7, #15]
          break;
 80026a6:	e005      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a8:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ef      	beq.n	8002694 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4904      	ldr	r1, [pc, #16]	@ (80026d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000

080026d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d018      	beq.n	8002724 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026f2:	4b67      	ldr	r3, [pc, #412]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0203 	and.w	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d10d      	bne.n	800271e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
       ||
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800270a:	4b61      	ldr	r3, [pc, #388]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
       ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d047      	beq.n	80027ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	e044      	b.n	80027ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d018      	beq.n	800275e <RCCEx_PLLSAI2_Config+0x86>
 800272c:	2b03      	cmp	r3, #3
 800272e:	d825      	bhi.n	800277c <RCCEx_PLLSAI2_Config+0xa4>
 8002730:	2b01      	cmp	r3, #1
 8002732:	d002      	beq.n	800273a <RCCEx_PLLSAI2_Config+0x62>
 8002734:	2b02      	cmp	r3, #2
 8002736:	d009      	beq.n	800274c <RCCEx_PLLSAI2_Config+0x74>
 8002738:	e020      	b.n	800277c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800273a:	4b55      	ldr	r3, [pc, #340]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d11d      	bne.n	8002782 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274a:	e01a      	b.n	8002782 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800274c:	4b50      	ldr	r3, [pc, #320]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d116      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275c:	e013      	b.n	8002786 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800275e:	4b4c      	ldr	r3, [pc, #304]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800276a:	4b49      	ldr	r3, [pc, #292]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800277a:	e006      	b.n	800278a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      break;
 8002780:	e004      	b.n	800278c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002782:	bf00      	nop
 8002784:	e002      	b.n	800278c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002786:	bf00      	nop
 8002788:	e000      	b.n	800278c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800278a:	bf00      	nop
    }

    if(status == HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002792:	4b3f      	ldr	r3, [pc, #252]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	430b      	orrs	r3, r1
 80027a8:	4939      	ldr	r1, [pc, #228]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d167      	bne.n	8002884 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027b4:	4b36      	ldr	r3, [pc, #216]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a35      	ldr	r2, [pc, #212]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe fa4c 	bl	8000c5c <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027c6:	e009      	b.n	80027dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c8:	f7fe fa48 	bl	8000c5c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	73fb      	strb	r3, [r7, #15]
        break;
 80027da:	e005      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ef      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d14a      	bne.n	8002884 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027f4:	4b26      	ldr	r3, [pc, #152]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6892      	ldr	r2, [r2, #8]
 8002804:	0211      	lsls	r1, r2, #8
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68d2      	ldr	r2, [r2, #12]
 800280a:	0912      	lsrs	r2, r2, #4
 800280c:	0452      	lsls	r2, r2, #17
 800280e:	430a      	orrs	r2, r1
 8002810:	491f      	ldr	r1, [pc, #124]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	614b      	str	r3, [r1, #20]
 8002816:	e011      	b.n	800283c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002818:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002820:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	0211      	lsls	r1, r2, #8
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6912      	ldr	r2, [r2, #16]
 800282e:	0852      	lsrs	r2, r2, #1
 8002830:	3a01      	subs	r2, #1
 8002832:	0652      	lsls	r2, r2, #25
 8002834:	430a      	orrs	r2, r1
 8002836:	4916      	ldr	r1, [pc, #88]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002838:	4313      	orrs	r3, r2
 800283a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800283c:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a13      	ldr	r2, [pc, #76]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002846:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fa08 	bl	8000c5c <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800284e:	e009      	b.n	8002864 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002850:	f7fe fa04 	bl	8000c5c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d902      	bls.n	8002864 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	73fb      	strb	r3, [r7, #15]
          break;
 8002862:	e005      	b.n	8002870 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002864:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	4904      	ldr	r1, [pc, #16]	@ (8002890 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e049      	b.n	800293a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f841 	bl	8002942 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f000 f9ea 	bl	8002cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d001      	beq.n	8002970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e04f      	b.n	8002a10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a23      	ldr	r2, [pc, #140]	@ (8002a1c <HAL_TIM_Base_Start_IT+0xc4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_TIM_Base_Start_IT+0x76>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299a:	d018      	beq.n	80029ce <HAL_TIM_Base_Start_IT+0x76>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a20 <HAL_TIM_Base_Start_IT+0xc8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_TIM_Base_Start_IT+0x76>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <HAL_TIM_Base_Start_IT+0xcc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_TIM_Base_Start_IT+0x76>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_TIM_Base_Start_IT+0x76>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1b      	ldr	r2, [pc, #108]	@ (8002a2c <HAL_TIM_Base_Start_IT+0xd4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_TIM_Base_Start_IT+0x76>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a19      	ldr	r2, [pc, #100]	@ (8002a30 <HAL_TIM_Base_Start_IT+0xd8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d115      	bne.n	80029fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <HAL_TIM_Base_Start_IT+0xdc>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d015      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0xb4>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e6:	d011      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e008      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e000      	b.n	8002a0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40013400 	.word	0x40013400
 8002a30:	40014000 	.word	0x40014000
 8002a34:	00010007 	.word	0x00010007

08002a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d020      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0202 	mvn.w	r2, #2
 8002a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8f3 	bl	8002c6e <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8e5 	bl	8002c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8f6 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d020      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01b      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0204 	mvn.w	r2, #4
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8cd 	bl	8002c6e <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8bf 	bl	8002c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8d0 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d020      	beq.n	8002b34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0208 	mvn.w	r2, #8
 8002b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8a7 	bl	8002c6e <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f899 	bl	8002c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f8aa 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d020      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0210 	mvn.w	r2, #16
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2208      	movs	r2, #8
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f881 	bl	8002c6e <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f873 	bl	8002c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f884 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0201 	mvn.w	r2, #1
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f851 	bl	8002c46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f91d 	bl	8002e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f915 	bl	8002e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f83e 	bl	8002c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00c      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0220 	mvn.w	r2, #32
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f8dd 	bl	8002df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a46      	ldr	r2, [pc, #280]	@ (8002dd8 <TIM_Base_SetConfig+0x12c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <TIM_Base_SetConfig+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cca:	d00f      	beq.n	8002cec <TIM_Base_SetConfig+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a43      	ldr	r2, [pc, #268]	@ (8002ddc <TIM_Base_SetConfig+0x130>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <TIM_Base_SetConfig+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a42      	ldr	r2, [pc, #264]	@ (8002de0 <TIM_Base_SetConfig+0x134>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d007      	beq.n	8002cec <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a41      	ldr	r2, [pc, #260]	@ (8002de4 <TIM_Base_SetConfig+0x138>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a40      	ldr	r2, [pc, #256]	@ (8002de8 <TIM_Base_SetConfig+0x13c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d108      	bne.n	8002cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a35      	ldr	r2, [pc, #212]	@ (8002dd8 <TIM_Base_SetConfig+0x12c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01f      	beq.n	8002d46 <TIM_Base_SetConfig+0x9a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0c:	d01b      	beq.n	8002d46 <TIM_Base_SetConfig+0x9a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a32      	ldr	r2, [pc, #200]	@ (8002ddc <TIM_Base_SetConfig+0x130>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d017      	beq.n	8002d46 <TIM_Base_SetConfig+0x9a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a31      	ldr	r2, [pc, #196]	@ (8002de0 <TIM_Base_SetConfig+0x134>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <TIM_Base_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a30      	ldr	r2, [pc, #192]	@ (8002de4 <TIM_Base_SetConfig+0x138>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00f      	beq.n	8002d46 <TIM_Base_SetConfig+0x9a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	@ (8002de8 <TIM_Base_SetConfig+0x13c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00b      	beq.n	8002d46 <TIM_Base_SetConfig+0x9a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <TIM_Base_SetConfig+0x140>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_Base_SetConfig+0x9a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2d      	ldr	r2, [pc, #180]	@ (8002df0 <TIM_Base_SetConfig+0x144>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2c      	ldr	r2, [pc, #176]	@ (8002df4 <TIM_Base_SetConfig+0x148>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	@ (8002dd8 <TIM_Base_SetConfig+0x12c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00f      	beq.n	8002da4 <TIM_Base_SetConfig+0xf8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <TIM_Base_SetConfig+0x13c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00b      	beq.n	8002da4 <TIM_Base_SetConfig+0xf8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a17      	ldr	r2, [pc, #92]	@ (8002dec <TIM_Base_SetConfig+0x140>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <TIM_Base_SetConfig+0xf8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a16      	ldr	r2, [pc, #88]	@ (8002df0 <TIM_Base_SetConfig+0x144>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <TIM_Base_SetConfig+0xf8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a15      	ldr	r2, [pc, #84]	@ (8002df4 <TIM_Base_SetConfig+0x148>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d103      	bne.n	8002dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	611a      	str	r2, [r3, #16]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40013400 	.word	0x40013400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800

08002df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e040      	b.n	8002ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fcd0 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	@ 0x24
 8002e60:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fae0 	bl	8003440 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f825 	bl	8002ed0 <UART_SetConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e01b      	b.n	8002ec8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb5f 	bl	8003584 <UART_CheckIdleState>
 8002ec6:	4603      	mov	r3, r0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b08a      	sub	sp, #40	@ 0x28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4ba4      	ldr	r3, [pc, #656]	@ (8003190 <UART_SetConfig+0x2c0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a99      	ldr	r2, [pc, #612]	@ (8003194 <UART_SetConfig+0x2c4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a90      	ldr	r2, [pc, #576]	@ (8003198 <UART_SetConfig+0x2c8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d126      	bne.n	8002fa8 <UART_SetConfig+0xd8>
 8002f5a:	4b90      	ldr	r3, [pc, #576]	@ (800319c <UART_SetConfig+0x2cc>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d81b      	bhi.n	8002fa0 <UART_SetConfig+0xd0>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <UART_SetConfig+0xa0>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f91 	.word	0x08002f91
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f99 	.word	0x08002f99
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f86:	e116      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8e:	e112      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002f90:	2304      	movs	r3, #4
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f96:	e10e      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002f98:	2308      	movs	r3, #8
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9e:	e10a      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e106      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7c      	ldr	r2, [pc, #496]	@ (80031a0 <UART_SetConfig+0x2d0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d138      	bne.n	8003024 <UART_SetConfig+0x154>
 8002fb2:	4b7a      	ldr	r3, [pc, #488]	@ (800319c <UART_SetConfig+0x2cc>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d82d      	bhi.n	800301c <UART_SetConfig+0x14c>
 8002fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc8 <UART_SetConfig+0xf8>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	0800301d 	.word	0x0800301d
 8002fd0:	0800301d 	.word	0x0800301d
 8002fd4:	0800301d 	.word	0x0800301d
 8002fd8:	0800300d 	.word	0x0800300d
 8002fdc:	0800301d 	.word	0x0800301d
 8002fe0:	0800301d 	.word	0x0800301d
 8002fe4:	0800301d 	.word	0x0800301d
 8002fe8:	08003005 	.word	0x08003005
 8002fec:	0800301d 	.word	0x0800301d
 8002ff0:	0800301d 	.word	0x0800301d
 8002ff4:	0800301d 	.word	0x0800301d
 8002ff8:	08003015 	.word	0x08003015
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003002:	e0d8      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003004:	2302      	movs	r3, #2
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300a:	e0d4      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800300c:	2304      	movs	r3, #4
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003012:	e0d0      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003014:	2308      	movs	r3, #8
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301a:	e0cc      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800301c:	2310      	movs	r3, #16
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003022:	e0c8      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a5e      	ldr	r2, [pc, #376]	@ (80031a4 <UART_SetConfig+0x2d4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d125      	bne.n	800307a <UART_SetConfig+0x1aa>
 800302e:	4b5b      	ldr	r3, [pc, #364]	@ (800319c <UART_SetConfig+0x2cc>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003038:	2b30      	cmp	r3, #48	@ 0x30
 800303a:	d016      	beq.n	800306a <UART_SetConfig+0x19a>
 800303c:	2b30      	cmp	r3, #48	@ 0x30
 800303e:	d818      	bhi.n	8003072 <UART_SetConfig+0x1a2>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d00a      	beq.n	800305a <UART_SetConfig+0x18a>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d814      	bhi.n	8003072 <UART_SetConfig+0x1a2>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <UART_SetConfig+0x182>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d008      	beq.n	8003062 <UART_SetConfig+0x192>
 8003050:	e00f      	b.n	8003072 <UART_SetConfig+0x1a2>
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003058:	e0ad      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800305a:	2302      	movs	r3, #2
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003060:	e0a9      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003062:	2304      	movs	r3, #4
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003068:	e0a5      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800306a:	2308      	movs	r3, #8
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003070:	e0a1      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003072:	2310      	movs	r3, #16
 8003074:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003078:	e09d      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4a      	ldr	r2, [pc, #296]	@ (80031a8 <UART_SetConfig+0x2d8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d125      	bne.n	80030d0 <UART_SetConfig+0x200>
 8003084:	4b45      	ldr	r3, [pc, #276]	@ (800319c <UART_SetConfig+0x2cc>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800308e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003090:	d016      	beq.n	80030c0 <UART_SetConfig+0x1f0>
 8003092:	2bc0      	cmp	r3, #192	@ 0xc0
 8003094:	d818      	bhi.n	80030c8 <UART_SetConfig+0x1f8>
 8003096:	2b80      	cmp	r3, #128	@ 0x80
 8003098:	d00a      	beq.n	80030b0 <UART_SetConfig+0x1e0>
 800309a:	2b80      	cmp	r3, #128	@ 0x80
 800309c:	d814      	bhi.n	80030c8 <UART_SetConfig+0x1f8>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <UART_SetConfig+0x1d8>
 80030a2:	2b40      	cmp	r3, #64	@ 0x40
 80030a4:	d008      	beq.n	80030b8 <UART_SetConfig+0x1e8>
 80030a6:	e00f      	b.n	80030c8 <UART_SetConfig+0x1f8>
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ae:	e082      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030b0:	2302      	movs	r3, #2
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e07e      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030b8:	2304      	movs	r3, #4
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030be:	e07a      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030c0:	2308      	movs	r3, #8
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c6:	e076      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030c8:	2310      	movs	r3, #16
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ce:	e072      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a35      	ldr	r2, [pc, #212]	@ (80031ac <UART_SetConfig+0x2dc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d12a      	bne.n	8003130 <UART_SetConfig+0x260>
 80030da:	4b30      	ldr	r3, [pc, #192]	@ (800319c <UART_SetConfig+0x2cc>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e8:	d01a      	beq.n	8003120 <UART_SetConfig+0x250>
 80030ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ee:	d81b      	bhi.n	8003128 <UART_SetConfig+0x258>
 80030f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f4:	d00c      	beq.n	8003110 <UART_SetConfig+0x240>
 80030f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030fa:	d815      	bhi.n	8003128 <UART_SetConfig+0x258>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <UART_SetConfig+0x238>
 8003100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003104:	d008      	beq.n	8003118 <UART_SetConfig+0x248>
 8003106:	e00f      	b.n	8003128 <UART_SetConfig+0x258>
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310e:	e052      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003110:	2302      	movs	r3, #2
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003116:	e04e      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003118:	2304      	movs	r3, #4
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311e:	e04a      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003120:	2308      	movs	r3, #8
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003126:	e046      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003128:	2310      	movs	r3, #16
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312e:	e042      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a17      	ldr	r2, [pc, #92]	@ (8003194 <UART_SetConfig+0x2c4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d13a      	bne.n	80031b0 <UART_SetConfig+0x2e0>
 800313a:	4b18      	ldr	r3, [pc, #96]	@ (800319c <UART_SetConfig+0x2cc>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003140:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003144:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003148:	d01a      	beq.n	8003180 <UART_SetConfig+0x2b0>
 800314a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800314e:	d81b      	bhi.n	8003188 <UART_SetConfig+0x2b8>
 8003150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003154:	d00c      	beq.n	8003170 <UART_SetConfig+0x2a0>
 8003156:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800315a:	d815      	bhi.n	8003188 <UART_SetConfig+0x2b8>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <UART_SetConfig+0x298>
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003164:	d008      	beq.n	8003178 <UART_SetConfig+0x2a8>
 8003166:	e00f      	b.n	8003188 <UART_SetConfig+0x2b8>
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316e:	e022      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003170:	2302      	movs	r3, #2
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003176:	e01e      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003178:	2304      	movs	r3, #4
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e01a      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003180:	2308      	movs	r3, #8
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e016      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003188:	2310      	movs	r3, #16
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318e:	e012      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003190:	efff69f3 	.word	0xefff69f3
 8003194:	40008000 	.word	0x40008000
 8003198:	40013800 	.word	0x40013800
 800319c:	40021000 	.word	0x40021000
 80031a0:	40004400 	.word	0x40004400
 80031a4:	40004800 	.word	0x40004800
 80031a8:	40004c00 	.word	0x40004c00
 80031ac:	40005000 	.word	0x40005000
 80031b0:	2310      	movs	r3, #16
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a9f      	ldr	r2, [pc, #636]	@ (8003438 <UART_SetConfig+0x568>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d17a      	bne.n	80032b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d824      	bhi.n	8003212 <UART_SetConfig+0x342>
 80031c8:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <UART_SetConfig+0x300>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	08003213 	.word	0x08003213
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	08003213 	.word	0x08003213
 80031e0:	08003203 	.word	0x08003203
 80031e4:	08003213 	.word	0x08003213
 80031e8:	08003213 	.word	0x08003213
 80031ec:	08003213 	.word	0x08003213
 80031f0:	0800320b 	.word	0x0800320b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f4:	f7fe fdd4 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 80031f8:	61f8      	str	r0, [r7, #28]
        break;
 80031fa:	e010      	b.n	800321e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031fc:	4b8f      	ldr	r3, [pc, #572]	@ (800343c <UART_SetConfig+0x56c>)
 80031fe:	61fb      	str	r3, [r7, #28]
        break;
 8003200:	e00d      	b.n	800321e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003202:	f7fe fd35 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8003206:	61f8      	str	r0, [r7, #28]
        break;
 8003208:	e009      	b.n	800321e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800320a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800320e:	61fb      	str	r3, [r7, #28]
        break;
 8003210:	e005      	b.n	800321e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800321c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80fb 	beq.w	800341c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	429a      	cmp	r2, r3
 8003234:	d305      	bcc.n	8003242 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	429a      	cmp	r2, r3
 8003240:	d903      	bls.n	800324a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003248:	e0e8      	b.n	800341c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2200      	movs	r2, #0
 800324e:	461c      	mov	r4, r3
 8003250:	4615      	mov	r5, r2
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	022b      	lsls	r3, r5, #8
 800325c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003260:	0222      	lsls	r2, r4, #8
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	6849      	ldr	r1, [r1, #4]
 8003266:	0849      	lsrs	r1, r1, #1
 8003268:	2000      	movs	r0, #0
 800326a:	4688      	mov	r8, r1
 800326c:	4681      	mov	r9, r0
 800326e:	eb12 0a08 	adds.w	sl, r2, r8
 8003272:	eb43 0b09 	adc.w	fp, r3, r9
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003284:	4650      	mov	r0, sl
 8003286:	4659      	mov	r1, fp
 8003288:	f7fc ffa2 	bl	80001d0 <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4613      	mov	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800329a:	d308      	bcc.n	80032ae <UART_SetConfig+0x3de>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032a2:	d204      	bcs.n	80032ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e0b6      	b.n	800341c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032b4:	e0b2      	b.n	800341c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032be:	d15e      	bne.n	800337e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d828      	bhi.n	800331a <UART_SetConfig+0x44a>
 80032c8:	a201      	add	r2, pc, #4	@ (adr r2, 80032d0 <UART_SetConfig+0x400>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7fe fd54 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 80032f8:	61f8      	str	r0, [r7, #28]
        break;
 80032fa:	e014      	b.n	8003326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7fe fd66 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8003300:	61f8      	str	r0, [r7, #28]
        break;
 8003302:	e010      	b.n	8003326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b4d      	ldr	r3, [pc, #308]	@ (800343c <UART_SetConfig+0x56c>)
 8003306:	61fb      	str	r3, [r7, #28]
        break;
 8003308:	e00d      	b.n	8003326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7fe fcb1 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 800330e:	61f8      	str	r0, [r7, #28]
        break;
 8003310:	e009      	b.n	8003326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003316:	61fb      	str	r3, [r7, #28]
        break;
 8003318:	e005      	b.n	8003326 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d077      	beq.n	800341c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005a      	lsls	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	441a      	add	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d916      	bls.n	8003376 <UART_SetConfig+0x4a6>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334e:	d212      	bcs.n	8003376 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f023 030f 	bic.w	r3, r3, #15
 8003358:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	b29a      	uxth	r2, r3
 8003366:	8afb      	ldrh	r3, [r7, #22]
 8003368:	4313      	orrs	r3, r2
 800336a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	8afa      	ldrh	r2, [r7, #22]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	e052      	b.n	800341c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800337c:	e04e      	b.n	800341c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800337e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003382:	2b08      	cmp	r3, #8
 8003384:	d827      	bhi.n	80033d6 <UART_SetConfig+0x506>
 8003386:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <UART_SetConfig+0x4bc>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033c1 	.word	0x080033c1
 8003398:	080033d7 	.word	0x080033d7
 800339c:	080033c7 	.word	0x080033c7
 80033a0:	080033d7 	.word	0x080033d7
 80033a4:	080033d7 	.word	0x080033d7
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033cf 	.word	0x080033cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7fe fcf6 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 80033b4:	61f8      	str	r0, [r7, #28]
        break;
 80033b6:	e014      	b.n	80033e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b8:	f7fe fd08 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 80033bc:	61f8      	str	r0, [r7, #28]
        break;
 80033be:	e010      	b.n	80033e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b1e      	ldr	r3, [pc, #120]	@ (800343c <UART_SetConfig+0x56c>)
 80033c2:	61fb      	str	r3, [r7, #28]
        break;
 80033c4:	e00d      	b.n	80033e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7fe fc53 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 80033ca:	61f8      	str	r0, [r7, #28]
        break;
 80033cc:	e009      	b.n	80033e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d2:	61fb      	str	r3, [r7, #28]
        break;
 80033d4:	e005      	b.n	80033e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033e0:	bf00      	nop
    }

    if (pclk != 0U)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d019      	beq.n	800341c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	085a      	lsrs	r2, r3, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	441a      	add	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	d909      	bls.n	8003416 <UART_SetConfig+0x546>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003408:	d205      	bcs.n	8003416 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	e002      	b.n	800341c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003428:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800342c:	4618      	mov	r0, r3
 800342e:	3728      	adds	r7, #40	@ 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003436:	bf00      	nop
 8003438:	40008000 	.word	0x40008000
 800343c:	00f42400 	.word	0x00f42400

08003440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01a      	beq.n	8003556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800353e:	d10a      	bne.n	8003556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b098      	sub	sp, #96	@ 0x60
 8003588:	af02      	add	r7, sp, #8
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003594:	f7fd fb62 	bl	8000c5c <HAL_GetTick>
 8003598:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d12e      	bne.n	8003606 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b0:	2200      	movs	r2, #0
 80035b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f88c 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d021      	beq.n	8003606 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e6      	bne.n	80035c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e062      	b.n	80036cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d149      	bne.n	80036a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003614:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f856 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d03c      	beq.n	80036a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	623b      	str	r3, [r7, #32]
   return(result);
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800364c:	633b      	str	r3, [r7, #48]	@ 0x30
 800364e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e6      	bne.n	800362e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3308      	adds	r3, #8
 8003666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003680:	61fa      	str	r2, [r7, #28]
 8003682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	69b9      	ldr	r1, [r7, #24]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	617b      	str	r3, [r7, #20]
   return(result);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e5      	bne.n	8003660 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e011      	b.n	80036cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3758      	adds	r7, #88	@ 0x58
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e4:	e04f      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d04b      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fd fab5 	bl	8000c5c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <UART_WaitOnFlagUntilTimeout+0x30>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e04e      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d037      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b80      	cmp	r3, #128	@ 0x80
 800371a:	d034      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb2>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b40      	cmp	r3, #64	@ 0x40
 8003720:	d031      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d110      	bne.n	8003752 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2208      	movs	r2, #8
 8003736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f838 	bl	80037ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2208      	movs	r2, #8
 8003742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e029      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800375c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003760:	d111      	bne.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800376a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f81e 	bl	80037ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e00f      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d0a0      	beq.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b095      	sub	sp, #84	@ 0x54
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80037d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e6      	bne.n	80037b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3308      	adds	r3, #8
 80037ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800380e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e5      	bne.n	80037e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003820:	2b01      	cmp	r3, #1
 8003822:	d118      	bne.n	8003856 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	60bb      	str	r3, [r7, #8]
   return(result);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f023 0310 	bic.w	r3, r3, #16
 8003838:	647b      	str	r3, [r7, #68]	@ 0x44
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6979      	ldr	r1, [r7, #20]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	613b      	str	r3, [r7, #16]
   return(result);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e6      	bne.n	8003824 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800386a:	bf00      	nop
 800386c:	3754      	adds	r7, #84	@ 0x54
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <__NVIC_SetPriority>:
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	db0a      	blt.n	80038a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	490c      	ldr	r1, [pc, #48]	@ (80038c4 <__NVIC_SetPriority+0x4c>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	0112      	lsls	r2, r2, #4
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	440b      	add	r3, r1
 800389c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038a0:	e00a      	b.n	80038b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4908      	ldr	r1, [pc, #32]	@ (80038c8 <__NVIC_SetPriority+0x50>)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	3b04      	subs	r3, #4
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	440b      	add	r3, r1
 80038b6:	761a      	strb	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000e100 	.word	0xe000e100
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80038d0:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <SysTick_Handler+0x1c>)
 80038d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80038d4:	f002 fa04 	bl	8005ce0 <xTaskGetSchedulerState>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d001      	beq.n	80038e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80038de:	f003 f8fb 	bl	8006ad8 <xPortSysTickHandler>
  }
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000e010 	.word	0xe000e010

080038ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038f0:	2100      	movs	r1, #0
 80038f2:	f06f 0004 	mvn.w	r0, #4
 80038f6:	f7ff ffbf 	bl	8003878 <__NVIC_SetPriority>
#endif
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003906:	f3ef 8305 	mrs	r3, IPSR
 800390a:	603b      	str	r3, [r7, #0]
  return(result);
 800390c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003912:	f06f 0305 	mvn.w	r3, #5
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	e00c      	b.n	8003934 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <osKernelInitialize+0x44>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003922:	4b08      	ldr	r3, [pc, #32]	@ (8003944 <osKernelInitialize+0x44>)
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003928:	2300      	movs	r3, #0
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	e002      	b.n	8003934 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003934:	687b      	ldr	r3, [r7, #4]
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000170 	.word	0x20000170

08003948 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800394e:	f3ef 8305 	mrs	r3, IPSR
 8003952:	603b      	str	r3, [r7, #0]
  return(result);
 8003954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <osKernelStart+0x1a>
    stat = osErrorISR;
 800395a:	f06f 0305 	mvn.w	r3, #5
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	e010      	b.n	8003984 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003962:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <osKernelStart+0x48>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d109      	bne.n	800397e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800396a:	f7ff ffbf 	bl	80038ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800396e:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <osKernelStart+0x48>)
 8003970:	2202      	movs	r2, #2
 8003972:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003974:	f001 fd56 	bl	8005424 <vTaskStartScheduler>
      stat = osOK;
 8003978:	2300      	movs	r3, #0
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	e002      	b.n	8003984 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003984:	687b      	ldr	r3, [r7, #4]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000170 	.word	0x20000170

08003994 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b08e      	sub	sp, #56	@ 0x38
 8003998:	af04      	add	r7, sp, #16
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039a4:	f3ef 8305 	mrs	r3, IPSR
 80039a8:	617b      	str	r3, [r7, #20]
  return(result);
 80039aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d17e      	bne.n	8003aae <osThreadNew+0x11a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d07b      	beq.n	8003aae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039ba:	2318      	movs	r3, #24
 80039bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
 80039c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d045      	beq.n	8003a5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <osThreadNew+0x48>
        name = attr->name;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <osThreadNew+0x6e>
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b38      	cmp	r3, #56	@ 0x38
 80039f4:	d805      	bhi.n	8003a02 <osThreadNew+0x6e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <osThreadNew+0x72>
        return (NULL);
 8003a02:	2300      	movs	r3, #0
 8003a04:	e054      	b.n	8003ab0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00e      	beq.n	8003a3c <osThreadNew+0xa8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b5b      	cmp	r3, #91	@ 0x5b
 8003a24:	d90a      	bls.n	8003a3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <osThreadNew+0xa8>
        mem = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e010      	b.n	8003a5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10c      	bne.n	8003a5e <osThreadNew+0xca>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d108      	bne.n	8003a5e <osThreadNew+0xca>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <osThreadNew+0xca>
          mem = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e001      	b.n	8003a5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d110      	bne.n	8003a86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a6c:	9202      	str	r2, [sp, #8]
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6a3a      	ldr	r2, [r7, #32]
 8003a78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f001 faf6 	bl	800506c <xTaskCreateStatic>
 8003a80:	4603      	mov	r3, r0
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	e013      	b.n	8003aae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d110      	bne.n	8003aae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	f107 0310 	add.w	r3, r7, #16
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f001 fb44 	bl	800512c <xTaskCreate>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <osThreadNew+0x11a>
            hTask = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003aae:	693b      	ldr	r3, [r7, #16]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	@ 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ac0:	f3ef 8305 	mrs	r3, IPSR
 8003ac4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <osDelay+0x1c>
    stat = osErrorISR;
 8003acc:	f06f 0305 	mvn.w	r3, #5
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	e007      	b.n	8003ae4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f001 fc6a 	bl	80053b8 <vTaskDelay>
    }
  }

  return (stat);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b088      	sub	sp, #32
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003afa:	f3ef 8305 	mrs	r3, IPSR
 8003afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b00:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d174      	bne.n	8003bf0 <osMutexNew+0x102>
    if (attr != NULL) {
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e001      	b.n	8003b18 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <osMutexNew+0x3a>
      rmtx = 1U;
 8003b22:	2301      	movs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e001      	b.n	8003b2c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d15c      	bne.n	8003bf0 <osMutexNew+0x102>
      mem = -1;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <osMutexNew+0x6a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003b50:	d902      	bls.n	8003b58 <osMutexNew+0x6a>
          mem = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	e00c      	b.n	8003b72 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <osMutexNew+0x84>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <osMutexNew+0x84>
            mem = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	e001      	b.n	8003b72 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d112      	bne.n	8003b9e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4619      	mov	r1, r3
 8003b84:	2004      	movs	r0, #4
 8003b86:	f000 fc50 	bl	800442a <xQueueCreateMutexStatic>
 8003b8a:	61f8      	str	r0, [r7, #28]
 8003b8c:	e016      	b.n	8003bbc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4619      	mov	r1, r3
 8003b94:	2001      	movs	r0, #1
 8003b96:	f000 fc48 	bl	800442a <xQueueCreateMutexStatic>
 8003b9a:	61f8      	str	r0, [r7, #28]
 8003b9c:	e00e      	b.n	8003bbc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003baa:	2004      	movs	r0, #4
 8003bac:	f000 fc25 	bl	80043fa <xQueueCreateMutex>
 8003bb0:	61f8      	str	r0, [r7, #28]
 8003bb2:	e003      	b.n	8003bbc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f000 fc20 	bl	80043fa <xQueueCreateMutex>
 8003bba:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00c      	beq.n	8003bdc <osMutexNew+0xee>
        if (attr != NULL) {
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <osMutexNew+0xe2>
          name = attr->name;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	e001      	b.n	8003bd4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003bd4:	68f9      	ldr	r1, [r7, #12]
 8003bd6:	69f8      	ldr	r0, [r7, #28]
 8003bd8:	f001 f9ea 	bl	8004fb0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <osMutexNew+0x102>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c18:	f3ef 8305 	mrs	r3, IPSR
 8003c1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c1e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003c24:	f06f 0305 	mvn.w	r3, #5
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e02c      	b.n	8003c86 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003c32:	f06f 0303 	mvn.w	r3, #3
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e025      	b.n	8003c86 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d011      	beq.n	8003c64 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003c40:	6839      	ldr	r1, [r7, #0]
 8003c42:	6938      	ldr	r0, [r7, #16]
 8003c44:	f000 fc41 	bl	80044ca <xQueueTakeMutexRecursive>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d01b      	beq.n	8003c86 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003c54:	f06f 0301 	mvn.w	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e014      	b.n	8003c86 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003c5c:	f06f 0302 	mvn.w	r3, #2
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e010      	b.n	8003c86 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	6938      	ldr	r0, [r7, #16]
 8003c68:	f000 fee8 	bl	8004a3c <xQueueSemaphoreTake>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d009      	beq.n	8003c86 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003c78:	f06f 0301 	mvn.w	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e002      	b.n	8003c86 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003c80:	f06f 0302 	mvn.w	r3, #2
 8003c84:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003c86:	697b      	ldr	r3, [r7, #20]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cac:	f3ef 8305 	mrs	r3, IPSR
 8003cb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cb2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003cb8:	f06f 0305 	mvn.w	r3, #5
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e01f      	b.n	8003d00 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003cc6:	f06f 0303 	mvn.w	r3, #3
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e018      	b.n	8003d00 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003cd4:	6938      	ldr	r0, [r7, #16]
 8003cd6:	f000 fbc3 	bl	8004460 <xQueueGiveMutexRecursive>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d00f      	beq.n	8003d00 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003ce0:	f06f 0302 	mvn.w	r3, #2
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e00b      	b.n	8003d00 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	6938      	ldr	r0, [r7, #16]
 8003cf0:	f000 fc22 	bl	8004538 <xQueueGenericSend>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d002      	beq.n	8003d00 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003cfa:	f06f 0302 	mvn.w	r3, #2
 8003cfe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003d00:	697b      	ldr	r3, [r7, #20]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b08a      	sub	sp, #40	@ 0x28
 8003d0e:	af02      	add	r7, sp, #8
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d1a:	f3ef 8305 	mrs	r3, IPSR
 8003d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8003d20:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d15f      	bne.n	8003de6 <osMessageQueueNew+0xdc>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05c      	beq.n	8003de6 <osMessageQueueNew+0xdc>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d059      	beq.n	8003de6 <osMessageQueueNew+0xdc>
    mem = -1;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d029      	beq.n	8003d92 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d012      	beq.n	8003d6c <osMessageQueueNew+0x62>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003d4c:	d90e      	bls.n	8003d6c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <osMessageQueueNew+0x62>
        mem = 1;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	e014      	b.n	8003d96 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d110      	bne.n	8003d96 <osMessageQueueNew+0x8c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10c      	bne.n	8003d96 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d108      	bne.n	8003d96 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <osMessageQueueNew+0x8c>
          mem = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e001      	b.n	8003d96 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d10b      	bne.n	8003db4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2100      	movs	r1, #0
 8003da6:	9100      	str	r1, [sp, #0]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa30 	bl	8004210 <xQueueGenericCreateStatic>
 8003db0:	61f8      	str	r0, [r7, #28]
 8003db2:	e008      	b.n	8003dc6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 faa3 	bl	800430a <xQueueGenericCreate>
 8003dc4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00c      	beq.n	8003de6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <osMessageQueueNew+0xd0>
        name = attr->name;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e001      	b.n	8003dde <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	69f8      	ldr	r0, [r7, #28]
 8003de2:	f001 f8e5 	bl	8004fb0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003de6:	69fb      	ldr	r3, [r7, #28]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e08:	f3ef 8305 	mrs	r3, IPSR
 8003e0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e0e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d028      	beq.n	8003e66 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <osMessageQueuePut+0x36>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <osMessageQueuePut+0x36>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003e26:	f06f 0303 	mvn.w	r3, #3
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	e038      	b.n	8003ea0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003e32:	f107 0210 	add.w	r2, r7, #16
 8003e36:	2300      	movs	r3, #0
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	69b8      	ldr	r0, [r7, #24]
 8003e3c:	f000 fc7e 	bl	800473c <xQueueGenericSendFromISR>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d003      	beq.n	8003e4e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003e46:	f06f 0302 	mvn.w	r3, #2
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	e028      	b.n	8003ea0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d025      	beq.n	8003ea0 <osMessageQueuePut+0xb0>
 8003e54:	4b15      	ldr	r3, [pc, #84]	@ (8003eac <osMessageQueuePut+0xbc>)
 8003e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	e01c      	b.n	8003ea0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <osMessageQueuePut+0x82>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003e72:	f06f 0303 	mvn.w	r3, #3
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e012      	b.n	8003ea0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	69b8      	ldr	r0, [r7, #24]
 8003e82:	f000 fb59 	bl	8004538 <xQueueGenericSend>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d009      	beq.n	8003ea0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003e92:	f06f 0301 	mvn.w	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	e002      	b.n	8003ea0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003e9a:	f06f 0302 	mvn.w	r3, #2
 8003e9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	e000ed04 	.word	0xe000ed04

08003eb0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec6:	f3ef 8305 	mrs	r3, IPSR
 8003eca:	617b      	str	r3, [r7, #20]
  return(result);
 8003ecc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d028      	beq.n	8003f24 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <osMessageQueueGet+0x34>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <osMessageQueueGet+0x34>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003ee4:	f06f 0303 	mvn.w	r3, #3
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	e037      	b.n	8003f5c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003ef0:	f107 0310 	add.w	r3, r7, #16
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	69b8      	ldr	r0, [r7, #24]
 8003efa:	f000 feaf 	bl	8004c5c <xQueueReceiveFromISR>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d003      	beq.n	8003f0c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003f04:	f06f 0302 	mvn.w	r3, #2
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	e027      	b.n	8003f5c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d024      	beq.n	8003f5c <osMessageQueueGet+0xac>
 8003f12:	4b15      	ldr	r3, [pc, #84]	@ (8003f68 <osMessageQueueGet+0xb8>)
 8003f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	e01b      	b.n	8003f5c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <osMessageQueueGet+0x80>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003f30:	f06f 0303 	mvn.w	r3, #3
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	e011      	b.n	8003f5c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	69b8      	ldr	r0, [r7, #24]
 8003f3e:	f000 fc9b 	bl	8004878 <xQueueReceive>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d009      	beq.n	8003f5c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003f4e:	f06f 0301 	mvn.w	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e002      	b.n	8003f5c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003f56:	f06f 0302 	mvn.w	r3, #2
 8003f5a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003f5c:	69fb      	ldr	r3, [r7, #28]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a07      	ldr	r2, [pc, #28]	@ (8003f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4a06      	ldr	r2, [pc, #24]	@ (8003f9c <vApplicationGetIdleTaskMemory+0x30>)
 8003f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2280      	movs	r2, #128	@ 0x80
 8003f88:	601a      	str	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000174 	.word	0x20000174
 8003f9c:	200001d0 	.word	0x200001d0

08003fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a07      	ldr	r2, [pc, #28]	@ (8003fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8003fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4a06      	ldr	r2, [pc, #24]	@ (8003fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8003fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fbe:	601a      	str	r2, [r3, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	200003d0 	.word	0x200003d0
 8003fd0:	2000042c 	.word	0x2000042c

08003fd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f103 0208 	add.w	r2, r3, #8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f103 0208 	add.w	r2, r3, #8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f103 0208 	add.w	r2, r3, #8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d103      	bne.n	8004096 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	e00c      	b.n	80040b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3308      	adds	r3, #8
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e002      	b.n	80040a4 <vListInsert+0x2e>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d2f6      	bcs.n	800409e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	601a      	str	r2, [r3, #0]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6892      	ldr	r2, [r2, #8]
 80040fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6852      	ldr	r2, [r2, #4]
 8004108:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	d103      	bne.n	800411c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	1e5a      	subs	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004168:	f002 fc26 	bl	80069b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	441a      	add	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	3b01      	subs	r3, #1
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	441a      	add	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	22ff      	movs	r2, #255	@ 0xff
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	22ff      	movs	r2, #255	@ 0xff
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d114      	bne.n	80041e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01a      	beq.n	80041fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3310      	adds	r3, #16
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 fbb8 	bl	8005940 <xTaskRemoveFromEventList>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d012      	beq.n	80041fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <xQueueGenericReset+0xd0>)
 80041d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	e009      	b.n	80041fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3310      	adds	r3, #16
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fef1 	bl	8003fd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3324      	adds	r3, #36	@ 0x24
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff feec 	bl	8003fd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041fc:	f002 fc0e 	bl	8006a1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004200:	2301      	movs	r3, #1
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	e000ed04 	.word	0xe000ed04

08004210 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08e      	sub	sp, #56	@ 0x38
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10b      	bne.n	800423c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <xQueueGenericCreateStatic+0x56>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <xQueueGenericCreateStatic+0x5a>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <xQueueGenericCreateStatic+0x5c>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	623b      	str	r3, [r7, #32]
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <xQueueGenericCreateStatic+0x84>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <xQueueGenericCreateStatic+0x88>
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <xQueueGenericCreateStatic+0x8a>
 8004298:	2300      	movs	r3, #0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	61fb      	str	r3, [r7, #28]
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	e7fd      	b.n	80042b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042b6:	2350      	movs	r3, #80	@ 0x50
 80042b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b50      	cmp	r3, #80	@ 0x50
 80042be:	d00b      	beq.n	80042d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	61bb      	str	r3, [r7, #24]
}
 80042d2:	bf00      	nop
 80042d4:	bf00      	nop
 80042d6:	e7fd      	b.n	80042d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00d      	beq.n	8004300 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f840 	bl	8004380 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004302:	4618      	mov	r0, r3
 8004304:	3730      	adds	r7, #48	@ 0x30
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800430a:	b580      	push	{r7, lr}
 800430c:	b08a      	sub	sp, #40	@ 0x28
 800430e:	af02      	add	r7, sp, #8
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <xQueueGenericCreate+0x2c>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	613b      	str	r3, [r7, #16]
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	e7fd      	b.n	8004332 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3350      	adds	r3, #80	@ 0x50
 8004344:	4618      	mov	r0, r3
 8004346:	f002 fc59 	bl	8006bfc <pvPortMalloc>
 800434a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d011      	beq.n	8004376 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	3350      	adds	r3, #80	@ 0x50
 800435a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004364:	79fa      	ldrb	r2, [r7, #7]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f805 	bl	8004380 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004376:	69bb      	ldr	r3, [r7, #24]
	}
 8004378:	4618      	mov	r0, r3
 800437a:	3720      	adds	r7, #32
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d103      	bne.n	800439c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e002      	b.n	80043a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043ae:	2101      	movs	r1, #1
 80043b0:	69b8      	ldr	r0, [r7, #24]
 80043b2:	f7ff fec3 	bl	800413c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80043e6:	2300      	movs	r3, #0
 80043e8:	2200      	movs	r2, #0
 80043ea:	2100      	movs	r1, #0
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f8a3 	bl	8004538 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	4603      	mov	r3, r0
 8004402:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004404:	2301      	movs	r3, #1
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	461a      	mov	r2, r3
 8004410:	6939      	ldr	r1, [r7, #16]
 8004412:	6978      	ldr	r0, [r7, #20]
 8004414:	f7ff ff79 	bl	800430a <xQueueGenericCreate>
 8004418:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ffd3 	bl	80043c6 <prvInitialiseMutex>

		return xNewQueue;
 8004420:	68fb      	ldr	r3, [r7, #12]
	}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800442a:	b580      	push	{r7, lr}
 800442c:	b088      	sub	sp, #32
 800442e:	af02      	add	r7, sp, #8
 8004430:	4603      	mov	r3, r0
 8004432:	6039      	str	r1, [r7, #0]
 8004434:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004436:	2301      	movs	r3, #1
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2200      	movs	r2, #0
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	6978      	ldr	r0, [r7, #20]
 800444a:	f7ff fee1 	bl	8004210 <xQueueGenericCreateStatic>
 800444e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7ff ffb8 	bl	80043c6 <prvInitialiseMutex>

		return xNewQueue;
 8004456:	68fb      	ldr	r3, [r7, #12]
	}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	60fb      	str	r3, [r7, #12]
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	e7fd      	b.n	8004486 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	689c      	ldr	r4, [r3, #8]
 800448e:	f001 fc17 	bl	8005cc0 <xTaskGetCurrentTaskHandle>
 8004492:	4603      	mov	r3, r0
 8004494:	429c      	cmp	r4, r3
 8004496:	d111      	bne.n	80044bc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	1e5a      	subs	r2, r3, #1
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80044aa:	2300      	movs	r3, #0
 80044ac:	2200      	movs	r2, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	6938      	ldr	r0, [r7, #16]
 80044b2:	f000 f841 	bl	8004538 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80044b6:	2301      	movs	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	e001      	b.n	80044c0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80044c0:	697b      	ldr	r3, [r7, #20]
	}
 80044c2:	4618      	mov	r0, r3
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}

080044ca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80044ca:	b590      	push	{r4, r7, lr}
 80044cc:	b087      	sub	sp, #28
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60fb      	str	r3, [r7, #12]
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	e7fd      	b.n	80044f2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	689c      	ldr	r4, [r3, #8]
 80044fa:	f001 fbe1 	bl	8005cc0 <xTaskGetCurrentTaskHandle>
 80044fe:	4603      	mov	r3, r0
 8004500:	429c      	cmp	r4, r3
 8004502:	d107      	bne.n	8004514 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800450e:	2301      	movs	r3, #1
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	e00c      	b.n	800452e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	6938      	ldr	r0, [r7, #16]
 8004518:	f000 fa90 	bl	8004a3c <xQueueSemaphoreTake>
 800451c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800452e:	697b      	ldr	r3, [r7, #20]
	}
 8004530:	4618      	mov	r0, r3
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd90      	pop	{r4, r7, pc}

08004538 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08e      	sub	sp, #56	@ 0x38
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004546:	2300      	movs	r3, #0
 8004548:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800454e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <xQueueGenericSend+0x34>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <xQueueGenericSend+0x42>
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <xQueueGenericSend+0x46>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <xQueueGenericSend+0x48>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <xQueueGenericSend+0x64>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d103      	bne.n	80045aa <xQueueGenericSend+0x72>
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <xQueueGenericSend+0x76>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <xQueueGenericSend+0x78>
 80045ae:	2300      	movs	r3, #0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <xQueueGenericSend+0x94>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	623b      	str	r3, [r7, #32]
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045cc:	f001 fb88 	bl	8005ce0 <xTaskGetSchedulerState>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <xQueueGenericSend+0xa4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <xQueueGenericSend+0xa8>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <xQueueGenericSend+0xaa>
 80045e0:	2300      	movs	r3, #0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <xQueueGenericSend+0xc6>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	61fb      	str	r3, [r7, #28]
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	e7fd      	b.n	80045fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045fe:	f002 f9db 	bl	80069b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <xQueueGenericSend+0xdc>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d129      	bne.n	8004668 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800461a:	f000 fbb9 	bl	8004d90 <prvCopyDataToQueue>
 800461e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	3324      	adds	r3, #36	@ 0x24
 800462c:	4618      	mov	r0, r3
 800462e:	f001 f987 	bl	8005940 <xTaskRemoveFromEventList>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004638:	4b3f      	ldr	r3, [pc, #252]	@ (8004738 <xQueueGenericSend+0x200>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	e00a      	b.n	8004660 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800464a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004650:	4b39      	ldr	r3, [pc, #228]	@ (8004738 <xQueueGenericSend+0x200>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004660:	f002 f9dc 	bl	8006a1c <vPortExitCritical>
				return pdPASS;
 8004664:	2301      	movs	r3, #1
 8004666:	e063      	b.n	8004730 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800466e:	f002 f9d5 	bl	8006a1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004672:	2300      	movs	r3, #0
 8004674:	e05c      	b.n	8004730 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	2b00      	cmp	r3, #0
 800467a:	d106      	bne.n	800468a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	4618      	mov	r0, r3
 8004682:	f001 f9c1 	bl	8005a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004686:	2301      	movs	r3, #1
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800468a:	f002 f9c7 	bl	8006a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800468e:	f000 ff31 	bl	80054f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004692:	f002 f991 	bl	80069b8 <vPortEnterCritical>
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800469c:	b25b      	sxtb	r3, r3
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d103      	bne.n	80046ac <xQueueGenericSend+0x174>
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046b2:	b25b      	sxtb	r3, r3
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d103      	bne.n	80046c2 <xQueueGenericSend+0x18a>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046c2:	f002 f9ab 	bl	8006a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046c6:	1d3a      	adds	r2, r7, #4
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f9b0 	bl	8005a34 <xTaskCheckForTimeOut>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d124      	bne.n	8004724 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046dc:	f000 fc50 	bl	8004f80 <prvIsQueueFull>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d018      	beq.n	8004718 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	3310      	adds	r3, #16
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 f8d4 	bl	800589c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046f6:	f000 fbdb 	bl	8004eb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046fa:	f000 ff09 	bl	8005510 <xTaskResumeAll>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	f47f af7c 	bne.w	80045fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004706:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <xQueueGenericSend+0x200>)
 8004708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	e772      	b.n	80045fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800471a:	f000 fbc9 	bl	8004eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800471e:	f000 fef7 	bl	8005510 <xTaskResumeAll>
 8004722:	e76c      	b.n	80045fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004726:	f000 fbc3 	bl	8004eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800472a:	f000 fef1 	bl	8005510 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800472e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004730:	4618      	mov	r0, r3
 8004732:	3738      	adds	r7, #56	@ 0x38
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b090      	sub	sp, #64	@ 0x40
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <xQueueGenericSendFromISR+0x3e>
 8004772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <xQueueGenericSendFromISR+0x42>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <xQueueGenericSendFromISR+0x44>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d103      	bne.n	80047aa <xQueueGenericSendFromISR+0x6e>
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <xQueueGenericSendFromISR+0x72>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <xQueueGenericSendFromISR+0x74>
 80047ae:	2300      	movs	r3, #0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10b      	bne.n	80047cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	623b      	str	r3, [r7, #32]
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	e7fd      	b.n	80047c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047cc:	f002 f9d4 	bl	8006b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047d0:	f3ef 8211 	mrs	r2, BASEPRI
 80047d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	61fa      	str	r2, [r7, #28]
 80047e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d302      	bcc.n	80047fe <xQueueGenericSendFromISR+0xc2>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d12f      	bne.n	800485e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004804:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800480a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004814:	f000 fabc 	bl	8004d90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004818:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d112      	bne.n	8004848 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482c:	3324      	adds	r3, #36	@ 0x24
 800482e:	4618      	mov	r0, r3
 8004830:	f001 f886 	bl	8005940 <xTaskRemoveFromEventList>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00e      	beq.n	8004858 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e007      	b.n	8004858 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004848:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800484c:	3301      	adds	r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	b25a      	sxtb	r2, r3
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004858:	2301      	movs	r3, #1
 800485a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800485c:	e001      	b.n	8004862 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800485e:	2300      	movs	r3, #0
 8004860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004864:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800486c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800486e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004870:	4618      	mov	r0, r3
 8004872:	3740      	adds	r7, #64	@ 0x40
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	@ 0x30
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <xQueueReceive+0x32>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	623b      	str	r3, [r7, #32]
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	e7fd      	b.n	80048a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <xQueueReceive+0x40>
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <xQueueReceive+0x44>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <xQueueReceive+0x46>
 80048bc:	2300      	movs	r3, #0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <xQueueReceive+0x62>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	61fb      	str	r3, [r7, #28]
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	e7fd      	b.n	80048d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048da:	f001 fa01 	bl	8005ce0 <xTaskGetSchedulerState>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <xQueueReceive+0x72>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <xQueueReceive+0x76>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <xQueueReceive+0x78>
 80048ee:	2300      	movs	r3, #0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <xQueueReceive+0x94>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	61bb      	str	r3, [r7, #24]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800490c:	f002 f854 	bl	80069b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01f      	beq.n	800495c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004920:	f000 faa0 	bl	8004e64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	1e5a      	subs	r2, r3, #1
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00f      	beq.n	8004954 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	3310      	adds	r3, #16
 8004938:	4618      	mov	r0, r3
 800493a:	f001 f801 	bl	8005940 <xTaskRemoveFromEventList>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004944:	4b3c      	ldr	r3, [pc, #240]	@ (8004a38 <xQueueReceive+0x1c0>)
 8004946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004954:	f002 f862 	bl	8006a1c <vPortExitCritical>
				return pdPASS;
 8004958:	2301      	movs	r3, #1
 800495a:	e069      	b.n	8004a30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004962:	f002 f85b 	bl	8006a1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004966:	2300      	movs	r3, #0
 8004968:	e062      	b.n	8004a30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800496a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004970:	f107 0310 	add.w	r3, r7, #16
 8004974:	4618      	mov	r0, r3
 8004976:	f001 f847 	bl	8005a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800497a:	2301      	movs	r3, #1
 800497c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800497e:	f002 f84d 	bl	8006a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004982:	f000 fdb7 	bl	80054f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004986:	f002 f817 	bl	80069b8 <vPortEnterCritical>
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004990:	b25b      	sxtb	r3, r3
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d103      	bne.n	80049a0 <xQueueReceive+0x128>
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049a6:	b25b      	sxtb	r3, r3
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d103      	bne.n	80049b6 <xQueueReceive+0x13e>
 80049ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049b6:	f002 f831 	bl	8006a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049ba:	1d3a      	adds	r2, r7, #4
 80049bc:	f107 0310 	add.w	r3, r7, #16
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 f836 	bl	8005a34 <xTaskCheckForTimeOut>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d123      	bne.n	8004a16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049d0:	f000 fac0 	bl	8004f54 <prvIsQueueEmpty>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d017      	beq.n	8004a0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049dc:	3324      	adds	r3, #36	@ 0x24
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 ff5a 	bl	800589c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049ea:	f000 fa61 	bl	8004eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049ee:	f000 fd8f 	bl	8005510 <xTaskResumeAll>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d189      	bne.n	800490c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80049f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a38 <xQueueReceive+0x1c0>)
 80049fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	e780      	b.n	800490c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a0c:	f000 fa50 	bl	8004eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a10:	f000 fd7e 	bl	8005510 <xTaskResumeAll>
 8004a14:	e77a      	b.n	800490c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a18:	f000 fa4a 	bl	8004eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a1c:	f000 fd78 	bl	8005510 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a22:	f000 fa97 	bl	8004f54 <prvIsQueueEmpty>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f43f af6f 	beq.w	800490c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3730      	adds	r7, #48	@ 0x30
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08e      	sub	sp, #56	@ 0x38
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a46:	2300      	movs	r3, #0
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10b      	bne.n	8004a70 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	623b      	str	r3, [r7, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	61fb      	str	r3, [r7, #28]
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a90:	f001 f926 	bl	8005ce0 <xTaskGetSchedulerState>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <xQueueSemaphoreTake+0x64>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <xQueueSemaphoreTake+0x68>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <xQueueSemaphoreTake+0x6a>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10b      	bne.n	8004ac2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	61bb      	str	r3, [r7, #24]
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	e7fd      	b.n	8004abe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ac2:	f001 ff79 	bl	80069b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d024      	beq.n	8004b1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ae2:	f001 fa77 	bl	8005fd4 <pvTaskIncrementMutexHeldCount>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00f      	beq.n	8004b14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af6:	3310      	adds	r3, #16
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 ff21 	bl	8005940 <xTaskRemoveFromEventList>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b04:	4b54      	ldr	r3, [pc, #336]	@ (8004c58 <xQueueSemaphoreTake+0x21c>)
 8004b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b14:	f001 ff82 	bl	8006a1c <vPortExitCritical>
				return pdPASS;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e098      	b.n	8004c4e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d112      	bne.n	8004b48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00b      	beq.n	8004b40 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	617b      	str	r3, [r7, #20]
}
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
 8004b3e:	e7fd      	b.n	8004b3c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b40:	f001 ff6c 	bl	8006a1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e082      	b.n	8004c4e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b4e:	f107 030c 	add.w	r3, r7, #12
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 ff58 	bl	8005a08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b5c:	f001 ff5e 	bl	8006a1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b60:	f000 fcc8 	bl	80054f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b64:	f001 ff28 	bl	80069b8 <vPortEnterCritical>
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b6e:	b25b      	sxtb	r3, r3
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d103      	bne.n	8004b7e <xQueueSemaphoreTake+0x142>
 8004b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b84:	b25b      	sxtb	r3, r3
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d103      	bne.n	8004b94 <xQueueSemaphoreTake+0x158>
 8004b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b94:	f001 ff42 	bl	8006a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b98:	463a      	mov	r2, r7
 8004b9a:	f107 030c 	add.w	r3, r7, #12
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 ff47 	bl	8005a34 <xTaskCheckForTimeOut>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d132      	bne.n	8004c12 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bae:	f000 f9d1 	bl	8004f54 <prvIsQueueEmpty>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d026      	beq.n	8004c06 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d109      	bne.n	8004bd4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004bc0:	f001 fefa 	bl	80069b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 f8a7 	bl	8005d1c <xTaskPriorityInherit>
 8004bce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004bd0:	f001 ff24 	bl	8006a1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd6:	3324      	adds	r3, #36	@ 0x24
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fe5d 	bl	800589c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004be2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004be4:	f000 f964 	bl	8004eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004be8:	f000 fc92 	bl	8005510 <xTaskResumeAll>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f47f af67 	bne.w	8004ac2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004bf4:	4b18      	ldr	r3, [pc, #96]	@ (8004c58 <xQueueSemaphoreTake+0x21c>)
 8004bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	e75d      	b.n	8004ac2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c08:	f000 f952 	bl	8004eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c0c:	f000 fc80 	bl	8005510 <xTaskResumeAll>
 8004c10:	e757      	b.n	8004ac2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c14:	f000 f94c 	bl	8004eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c18:	f000 fc7a 	bl	8005510 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c1e:	f000 f999 	bl	8004f54 <prvIsQueueEmpty>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f43f af4c 	beq.w	8004ac2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00d      	beq.n	8004c4c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004c30:	f001 fec2 	bl	80069b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c36:	f000 f893 	bl	8004d60 <prvGetDisinheritPriorityAfterTimeout>
 8004c3a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 f942 	bl	8005ecc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c48:	f001 fee8 	bl	8006a1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3738      	adds	r7, #56	@ 0x38
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08e      	sub	sp, #56	@ 0x38
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	623b      	str	r3, [r7, #32]
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	e7fd      	b.n	8004c86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <xQueueReceiveFromISR+0x3c>
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <xQueueReceiveFromISR+0x40>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <xQueueReceiveFromISR+0x42>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	61fb      	str	r3, [r7, #28]
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	e7fd      	b.n	8004cb6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cba:	f001 ff5d 	bl	8006b78 <vPortValidateInterruptPriority>
	__asm volatile
 8004cbe:	f3ef 8211 	mrs	r2, BASEPRI
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	61ba      	str	r2, [r7, #24]
 8004cd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004cd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d02f      	beq.n	8004d46 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cf4:	f000 f8b6 	bl	8004e64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	1e5a      	subs	r2, r3, #1
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d112      	bne.n	8004d30 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	3310      	adds	r3, #16
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fe12 	bl	8005940 <xTaskRemoveFromEventList>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00b      	beq.n	8004d40 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e007      	b.n	8004d40 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d34:	3301      	adds	r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	b25a      	sxtb	r2, r3
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004d40:	2301      	movs	r3, #1
 8004d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d44:	e001      	b.n	8004d4a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f383 8811 	msr	BASEPRI, r3
}
 8004d54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3738      	adds	r7, #56	@ 0x38
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d006      	beq.n	8004d7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e001      	b.n	8004d82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d82:	68fb      	ldr	r3, [r7, #12]
	}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d14d      	bne.n	8004e52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f001 f816 	bl	8005dec <xTaskPriorityDisinherit>
 8004dc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	e043      	b.n	8004e52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d119      	bne.n	8004e04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6858      	ldr	r0, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	f002 fb6f 	bl	80074be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	441a      	add	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d32b      	bcc.n	8004e52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	e026      	b.n	8004e52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68d8      	ldr	r0, [r3, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	f002 fb55 	bl	80074be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1c:	425b      	negs	r3, r3
 8004e1e:	441a      	add	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d207      	bcs.n	8004e40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	425b      	negs	r3, r3
 8004e3a:	441a      	add	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d105      	bne.n	8004e52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e5a:	697b      	ldr	r3, [r7, #20]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	441a      	add	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d303      	bcc.n	8004e98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68d9      	ldr	r1, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6838      	ldr	r0, [r7, #0]
 8004ea4:	f002 fb0b 	bl	80074be <memcpy>
	}
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004eb8:	f001 fd7e 	bl	80069b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ec2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec4:	e011      	b.n	8004eea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d012      	beq.n	8004ef4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3324      	adds	r3, #36	@ 0x24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fd34 	bl	8005940 <xTaskRemoveFromEventList>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ede:	f000 fe0d 	bl	8005afc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	dce9      	bgt.n	8004ec6 <prvUnlockQueue+0x16>
 8004ef2:	e000      	b.n	8004ef6 <prvUnlockQueue+0x46>
					break;
 8004ef4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	22ff      	movs	r2, #255	@ 0xff
 8004efa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004efe:	f001 fd8d 	bl	8006a1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f02:	f001 fd59 	bl	80069b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f0e:	e011      	b.n	8004f34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d012      	beq.n	8004f3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3310      	adds	r3, #16
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fd0f 	bl	8005940 <xTaskRemoveFromEventList>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f28:	f000 fde8 	bl	8005afc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dce9      	bgt.n	8004f10 <prvUnlockQueue+0x60>
 8004f3c:	e000      	b.n	8004f40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	22ff      	movs	r2, #255	@ 0xff
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f48:	f001 fd68 	bl	8006a1c <vPortExitCritical>
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f5c:	f001 fd2c 	bl	80069b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d102      	bne.n	8004f6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e001      	b.n	8004f72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f72:	f001 fd53 	bl	8006a1c <vPortExitCritical>

	return xReturn;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f88:	f001 fd16 	bl	80069b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d102      	bne.n	8004f9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e001      	b.n	8004fa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fa2:	f001 fd3b 	bl	8006a1c <vPortExitCritical>

	return xReturn;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e014      	b.n	8004fea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8005000 <vQueueAddToRegistry+0x50>)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fcc:	490c      	ldr	r1, [pc, #48]	@ (8005000 <vQueueAddToRegistry+0x50>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005000 <vQueueAddToRegistry+0x50>)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fe2:	e006      	b.n	8004ff2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b07      	cmp	r3, #7
 8004fee:	d9e7      	bls.n	8004fc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	2000082c 	.word	0x2000082c

08005004 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005014:	f001 fcd0 	bl	80069b8 <vPortEnterCritical>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800501e:	b25b      	sxtb	r3, r3
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d103      	bne.n	800502e <vQueueWaitForMessageRestricted+0x2a>
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005034:	b25b      	sxtb	r3, r3
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d103      	bne.n	8005044 <vQueueWaitForMessageRestricted+0x40>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005044:	f001 fcea 	bl	8006a1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3324      	adds	r3, #36	@ 0x24
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fc45 	bl	80058e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f7ff ff26 	bl	8004eb0 <prvUnlockQueue>
	}
 8005064:	bf00      	nop
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08e      	sub	sp, #56	@ 0x38
 8005070:	af04      	add	r7, sp, #16
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	623b      	str	r3, [r7, #32]
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	61fb      	str	r3, [r7, #28]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050b6:	235c      	movs	r3, #92	@ 0x5c
 80050b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80050be:	d00b      	beq.n	80050d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	61bb      	str	r3, [r7, #24]
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01e      	beq.n	800511e <xTaskCreateStatic+0xb2>
 80050e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01b      	beq.n	800511e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050f8:	2300      	movs	r3, #0
 80050fa:	9303      	str	r3, [sp, #12]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	9302      	str	r3, [sp, #8]
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f850 	bl	80051b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005116:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005118:	f000 f8de 	bl	80052d8 <prvAddNewTaskToReadyList>
 800511c:	e001      	b.n	8005122 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005122:	697b      	ldr	r3, [r7, #20]
	}
 8005124:	4618      	mov	r0, r3
 8005126:	3728      	adds	r7, #40	@ 0x28
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	@ 0x30
 8005130:	af04      	add	r7, sp, #16
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800513c:	88fb      	ldrh	r3, [r7, #6]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4618      	mov	r0, r3
 8005142:	f001 fd5b 	bl	8006bfc <pvPortMalloc>
 8005146:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00e      	beq.n	800516c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800514e:	205c      	movs	r0, #92	@ 0x5c
 8005150:	f001 fd54 	bl	8006bfc <pvPortMalloc>
 8005154:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
 8005162:	e005      	b.n	8005170 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005164:	6978      	ldr	r0, [r7, #20]
 8005166:	f001 fe17 	bl	8006d98 <vPortFree>
 800516a:	e001      	b.n	8005170 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d017      	beq.n	80051a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	2300      	movs	r3, #0
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	9302      	str	r3, [sp, #8]
 8005188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f80e 	bl	80051b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519a:	69f8      	ldr	r0, [r7, #28]
 800519c:	f000 f89c 	bl	80052d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051a0:	2301      	movs	r3, #1
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	e002      	b.n	80051ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295
 80051aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ac:	69bb      	ldr	r3, [r7, #24]
	}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b088      	sub	sp, #32
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	461a      	mov	r2, r3
 80051ce:	21a5      	movs	r1, #165	@ 0xa5
 80051d0:	f002 f8fa 	bl	80073c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051de:	3b01      	subs	r3, #1
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f023 0307 	bic.w	r3, r3, #7
 80051ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	617b      	str	r3, [r7, #20]
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	e7fd      	b.n	800520c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01f      	beq.n	8005256 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e012      	b.n	8005242 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	7819      	ldrb	r1, [r3, #0]
 8005224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	3334      	adds	r3, #52	@ 0x34
 800522c:	460a      	mov	r2, r1
 800522e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d006      	beq.n	800524a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2b0f      	cmp	r3, #15
 8005246:	d9e9      	bls.n	800521c <prvInitialiseNewTask+0x66>
 8005248:	e000      	b.n	800524c <prvInitialiseNewTask+0x96>
			{
				break;
 800524a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005254:	e003      	b.n	800525e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	2b37      	cmp	r3, #55	@ 0x37
 8005262:	d901      	bls.n	8005268 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005264:	2337      	movs	r3, #55	@ 0x37
 8005266:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005272:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	2200      	movs	r2, #0
 8005278:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fec8 	bl	8004014 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	3318      	adds	r3, #24
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe fec3 	bl	8004014 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005292:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005296:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	2200      	movs	r2, #0
 80052a8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	69b8      	ldr	r0, [r7, #24]
 80052b8:	f001 fa4e 	bl	8006758 <pxPortInitialiseStack>
 80052bc:	4602      	mov	r2, r0
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ce:	bf00      	nop
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052e0:	f001 fb6a 	bl	80069b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052e4:	4b2d      	ldr	r3, [pc, #180]	@ (800539c <prvAddNewTaskToReadyList+0xc4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	4a2c      	ldr	r2, [pc, #176]	@ (800539c <prvAddNewTaskToReadyList+0xc4>)
 80052ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052ee:	4b2c      	ldr	r3, [pc, #176]	@ (80053a0 <prvAddNewTaskToReadyList+0xc8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052f6:	4a2a      	ldr	r2, [pc, #168]	@ (80053a0 <prvAddNewTaskToReadyList+0xc8>)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052fc:	4b27      	ldr	r3, [pc, #156]	@ (800539c <prvAddNewTaskToReadyList+0xc4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d110      	bne.n	8005326 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005304:	f000 fc1e 	bl	8005b44 <prvInitialiseTaskLists>
 8005308:	e00d      	b.n	8005326 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800530a:	4b26      	ldr	r3, [pc, #152]	@ (80053a4 <prvAddNewTaskToReadyList+0xcc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005312:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <prvAddNewTaskToReadyList+0xc8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531c:	429a      	cmp	r2, r3
 800531e:	d802      	bhi.n	8005326 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005320:	4a1f      	ldr	r2, [pc, #124]	@ (80053a0 <prvAddNewTaskToReadyList+0xc8>)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005326:	4b20      	ldr	r3, [pc, #128]	@ (80053a8 <prvAddNewTaskToReadyList+0xd0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	4a1e      	ldr	r2, [pc, #120]	@ (80053a8 <prvAddNewTaskToReadyList+0xd0>)
 800532e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005330:	4b1d      	ldr	r3, [pc, #116]	@ (80053a8 <prvAddNewTaskToReadyList+0xd0>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533c:	4b1b      	ldr	r3, [pc, #108]	@ (80053ac <prvAddNewTaskToReadyList+0xd4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d903      	bls.n	800534c <prvAddNewTaskToReadyList+0x74>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <prvAddNewTaskToReadyList+0xd4>)
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4a15      	ldr	r2, [pc, #84]	@ (80053b0 <prvAddNewTaskToReadyList+0xd8>)
 800535a:	441a      	add	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f7fe fe63 	bl	800402e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005368:	f001 fb58 	bl	8006a1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800536c:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <prvAddNewTaskToReadyList+0xcc>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00e      	beq.n	8005392 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005374:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <prvAddNewTaskToReadyList+0xc8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	429a      	cmp	r2, r3
 8005380:	d207      	bcs.n	8005392 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005382:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <prvAddNewTaskToReadyList+0xdc>)
 8005384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000d40 	.word	0x20000d40
 80053a0:	2000086c 	.word	0x2000086c
 80053a4:	20000d4c 	.word	0x20000d4c
 80053a8:	20000d5c 	.word	0x20000d5c
 80053ac:	20000d48 	.word	0x20000d48
 80053b0:	20000870 	.word	0x20000870
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053ca:	4b14      	ldr	r3, [pc, #80]	@ (800541c <vTaskDelay+0x64>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <vTaskDelay+0x32>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60bb      	str	r3, [r7, #8]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053ea:	f000 f883 	bl	80054f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053ee:	2100      	movs	r1, #0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fe03 	bl	8005ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053f6:	f000 f88b 	bl	8005510 <xTaskResumeAll>
 80053fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005402:	4b07      	ldr	r3, [pc, #28]	@ (8005420 <vTaskDelay+0x68>)
 8005404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000d68 	.word	0x20000d68
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	@ 0x28
 8005428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005432:	463a      	mov	r2, r7
 8005434:	1d39      	adds	r1, r7, #4
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fd96 	bl	8003f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	9202      	str	r2, [sp, #8]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	460a      	mov	r2, r1
 8005452:	4922      	ldr	r1, [pc, #136]	@ (80054dc <vTaskStartScheduler+0xb8>)
 8005454:	4822      	ldr	r0, [pc, #136]	@ (80054e0 <vTaskStartScheduler+0xbc>)
 8005456:	f7ff fe09 	bl	800506c <xTaskCreateStatic>
 800545a:	4603      	mov	r3, r0
 800545c:	4a21      	ldr	r2, [pc, #132]	@ (80054e4 <vTaskStartScheduler+0xc0>)
 800545e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005460:	4b20      	ldr	r3, [pc, #128]	@ (80054e4 <vTaskStartScheduler+0xc0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e001      	b.n	8005472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005478:	f000 fe14 	bl	80060a4 <xTimerCreateTimerTask>
 800547c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d116      	bne.n	80054b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	613b      	str	r3, [r7, #16]
}
 8005496:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005498:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <vTaskStartScheduler+0xc4>)
 800549a:	f04f 32ff 	mov.w	r2, #4294967295
 800549e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054a0:	4b12      	ldr	r3, [pc, #72]	@ (80054ec <vTaskStartScheduler+0xc8>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054a6:	4b12      	ldr	r3, [pc, #72]	@ (80054f0 <vTaskStartScheduler+0xcc>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054ac:	f001 f9e0 	bl	8006870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054b0:	e00f      	b.n	80054d2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d10b      	bne.n	80054d2 <vTaskStartScheduler+0xae>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	60fb      	str	r3, [r7, #12]
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	e7fd      	b.n	80054ce <vTaskStartScheduler+0xaa>
}
 80054d2:	bf00      	nop
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	080079b8 	.word	0x080079b8
 80054e0:	08005b15 	.word	0x08005b15
 80054e4:	20000d64 	.word	0x20000d64
 80054e8:	20000d60 	.word	0x20000d60
 80054ec:	20000d4c 	.word	0x20000d4c
 80054f0:	20000d44 	.word	0x20000d44

080054f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054f8:	4b04      	ldr	r3, [pc, #16]	@ (800550c <vTaskSuspendAll+0x18>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a03      	ldr	r2, [pc, #12]	@ (800550c <vTaskSuspendAll+0x18>)
 8005500:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005502:	bf00      	nop
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	20000d68 	.word	0x20000d68

08005510 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800551e:	4b42      	ldr	r3, [pc, #264]	@ (8005628 <xTaskResumeAll+0x118>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <xTaskResumeAll+0x2e>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	603b      	str	r3, [r7, #0]
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	e7fd      	b.n	800553a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800553e:	f001 fa3b 	bl	80069b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005542:	4b39      	ldr	r3, [pc, #228]	@ (8005628 <xTaskResumeAll+0x118>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3b01      	subs	r3, #1
 8005548:	4a37      	ldr	r2, [pc, #220]	@ (8005628 <xTaskResumeAll+0x118>)
 800554a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554c:	4b36      	ldr	r3, [pc, #216]	@ (8005628 <xTaskResumeAll+0x118>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d162      	bne.n	800561a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005554:	4b35      	ldr	r3, [pc, #212]	@ (800562c <xTaskResumeAll+0x11c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d05e      	beq.n	800561a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800555c:	e02f      	b.n	80055be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555e:	4b34      	ldr	r3, [pc, #208]	@ (8005630 <xTaskResumeAll+0x120>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3318      	adds	r3, #24
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fdbc 	bl	80040e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3304      	adds	r3, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7fe fdb7 	bl	80040e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557e:	4b2d      	ldr	r3, [pc, #180]	@ (8005634 <xTaskResumeAll+0x124>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d903      	bls.n	800558e <xTaskResumeAll+0x7e>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	4a2a      	ldr	r2, [pc, #168]	@ (8005634 <xTaskResumeAll+0x124>)
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4a27      	ldr	r2, [pc, #156]	@ (8005638 <xTaskResumeAll+0x128>)
 800559c:	441a      	add	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7fe fd42 	bl	800402e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ae:	4b23      	ldr	r3, [pc, #140]	@ (800563c <xTaskResumeAll+0x12c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d302      	bcc.n	80055be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055b8:	4b21      	ldr	r3, [pc, #132]	@ (8005640 <xTaskResumeAll+0x130>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055be:	4b1c      	ldr	r3, [pc, #112]	@ (8005630 <xTaskResumeAll+0x120>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1cb      	bne.n	800555e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055cc:	f000 fb58 	bl	8005c80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005644 <xTaskResumeAll+0x134>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d010      	beq.n	80055fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055dc:	f000 f846 	bl	800566c <xTaskIncrementTick>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055e6:	4b16      	ldr	r3, [pc, #88]	@ (8005640 <xTaskResumeAll+0x130>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f1      	bne.n	80055dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80055f8:	4b12      	ldr	r3, [pc, #72]	@ (8005644 <xTaskResumeAll+0x134>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055fe:	4b10      	ldr	r3, [pc, #64]	@ (8005640 <xTaskResumeAll+0x130>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800560a:	4b0f      	ldr	r3, [pc, #60]	@ (8005648 <xTaskResumeAll+0x138>)
 800560c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800561a:	f001 f9ff 	bl	8006a1c <vPortExitCritical>

	return xAlreadyYielded;
 800561e:	68bb      	ldr	r3, [r7, #8]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20000d68 	.word	0x20000d68
 800562c:	20000d40 	.word	0x20000d40
 8005630:	20000d00 	.word	0x20000d00
 8005634:	20000d48 	.word	0x20000d48
 8005638:	20000870 	.word	0x20000870
 800563c:	2000086c 	.word	0x2000086c
 8005640:	20000d54 	.word	0x20000d54
 8005644:	20000d50 	.word	0x20000d50
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005652:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <xTaskGetTickCount+0x1c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005658:	687b      	ldr	r3, [r7, #4]
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000d44 	.word	0x20000d44

0800566c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005676:	4b4f      	ldr	r3, [pc, #316]	@ (80057b4 <xTaskIncrementTick+0x148>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f040 8090 	bne.w	80057a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005680:	4b4d      	ldr	r3, [pc, #308]	@ (80057b8 <xTaskIncrementTick+0x14c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005688:	4a4b      	ldr	r2, [pc, #300]	@ (80057b8 <xTaskIncrementTick+0x14c>)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d121      	bne.n	80056d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005694:	4b49      	ldr	r3, [pc, #292]	@ (80057bc <xTaskIncrementTick+0x150>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	603b      	str	r3, [r7, #0]
}
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	e7fd      	b.n	80056b2 <xTaskIncrementTick+0x46>
 80056b6:	4b41      	ldr	r3, [pc, #260]	@ (80057bc <xTaskIncrementTick+0x150>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	4b40      	ldr	r3, [pc, #256]	@ (80057c0 <xTaskIncrementTick+0x154>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a3e      	ldr	r2, [pc, #248]	@ (80057bc <xTaskIncrementTick+0x150>)
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4a3e      	ldr	r2, [pc, #248]	@ (80057c0 <xTaskIncrementTick+0x154>)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b3e      	ldr	r3, [pc, #248]	@ (80057c4 <xTaskIncrementTick+0x158>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3301      	adds	r3, #1
 80056d0:	4a3c      	ldr	r2, [pc, #240]	@ (80057c4 <xTaskIncrementTick+0x158>)
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	f000 fad4 	bl	8005c80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d8:	4b3b      	ldr	r3, [pc, #236]	@ (80057c8 <xTaskIncrementTick+0x15c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d349      	bcc.n	8005776 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056e2:	4b36      	ldr	r3, [pc, #216]	@ (80057bc <xTaskIncrementTick+0x150>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ec:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <xTaskIncrementTick+0x15c>)
 80056ee:	f04f 32ff 	mov.w	r2, #4294967295
 80056f2:	601a      	str	r2, [r3, #0]
					break;
 80056f4:	e03f      	b.n	8005776 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f6:	4b31      	ldr	r3, [pc, #196]	@ (80057bc <xTaskIncrementTick+0x150>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d203      	bcs.n	8005716 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800570e:	4a2e      	ldr	r2, [pc, #184]	@ (80057c8 <xTaskIncrementTick+0x15c>)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005714:	e02f      	b.n	8005776 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	3304      	adds	r3, #4
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fce4 	bl	80040e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3318      	adds	r3, #24
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe fcdb 	bl	80040e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005736:	4b25      	ldr	r3, [pc, #148]	@ (80057cc <xTaskIncrementTick+0x160>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d903      	bls.n	8005746 <xTaskIncrementTick+0xda>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	4a22      	ldr	r2, [pc, #136]	@ (80057cc <xTaskIncrementTick+0x160>)
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4a1f      	ldr	r2, [pc, #124]	@ (80057d0 <xTaskIncrementTick+0x164>)
 8005754:	441a      	add	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	3304      	adds	r3, #4
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f7fe fc66 	bl	800402e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005766:	4b1b      	ldr	r3, [pc, #108]	@ (80057d4 <xTaskIncrementTick+0x168>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	429a      	cmp	r2, r3
 800576e:	d3b8      	bcc.n	80056e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005774:	e7b5      	b.n	80056e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005776:	4b17      	ldr	r3, [pc, #92]	@ (80057d4 <xTaskIncrementTick+0x168>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577c:	4914      	ldr	r1, [pc, #80]	@ (80057d0 <xTaskIncrementTick+0x164>)
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d901      	bls.n	8005792 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005792:	4b11      	ldr	r3, [pc, #68]	@ (80057d8 <xTaskIncrementTick+0x16c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800579a:	2301      	movs	r3, #1
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e004      	b.n	80057aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057a0:	4b0e      	ldr	r3, [pc, #56]	@ (80057dc <xTaskIncrementTick+0x170>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	4a0d      	ldr	r2, [pc, #52]	@ (80057dc <xTaskIncrementTick+0x170>)
 80057a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057aa:	697b      	ldr	r3, [r7, #20]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000d68 	.word	0x20000d68
 80057b8:	20000d44 	.word	0x20000d44
 80057bc:	20000cf8 	.word	0x20000cf8
 80057c0:	20000cfc 	.word	0x20000cfc
 80057c4:	20000d58 	.word	0x20000d58
 80057c8:	20000d60 	.word	0x20000d60
 80057cc:	20000d48 	.word	0x20000d48
 80057d0:	20000870 	.word	0x20000870
 80057d4:	2000086c 	.word	0x2000086c
 80057d8:	20000d54 	.word	0x20000d54
 80057dc:	20000d50 	.word	0x20000d50

080057e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e6:	4b28      	ldr	r3, [pc, #160]	@ (8005888 <vTaskSwitchContext+0xa8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057ee:	4b27      	ldr	r3, [pc, #156]	@ (800588c <vTaskSwitchContext+0xac>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f4:	e042      	b.n	800587c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80057f6:	4b25      	ldr	r3, [pc, #148]	@ (800588c <vTaskSwitchContext+0xac>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057fc:	4b24      	ldr	r3, [pc, #144]	@ (8005890 <vTaskSwitchContext+0xb0>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e011      	b.n	8005828 <vTaskSwitchContext+0x48>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10b      	bne.n	8005822 <vTaskSwitchContext+0x42>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	607b      	str	r3, [r7, #4]
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	e7fd      	b.n	800581e <vTaskSwitchContext+0x3e>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3b01      	subs	r3, #1
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	491a      	ldr	r1, [pc, #104]	@ (8005894 <vTaskSwitchContext+0xb4>)
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0e3      	beq.n	8005804 <vTaskSwitchContext+0x24>
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4a13      	ldr	r2, [pc, #76]	@ (8005894 <vTaskSwitchContext+0xb4>)
 8005848:	4413      	add	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	3308      	adds	r3, #8
 800585e:	429a      	cmp	r2, r3
 8005860:	d104      	bne.n	800586c <vTaskSwitchContext+0x8c>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	605a      	str	r2, [r3, #4]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	4a09      	ldr	r2, [pc, #36]	@ (8005898 <vTaskSwitchContext+0xb8>)
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4a06      	ldr	r2, [pc, #24]	@ (8005890 <vTaskSwitchContext+0xb0>)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6013      	str	r3, [r2, #0]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	20000d68 	.word	0x20000d68
 800588c:	20000d54 	.word	0x20000d54
 8005890:	20000d48 	.word	0x20000d48
 8005894:	20000870 	.word	0x20000870
 8005898:	2000086c 	.word	0x2000086c

0800589c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	60fb      	str	r3, [r7, #12]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058c4:	4b07      	ldr	r3, [pc, #28]	@ (80058e4 <vTaskPlaceOnEventList+0x48>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3318      	adds	r3, #24
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fe fbd2 	bl	8004076 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058d2:	2101      	movs	r1, #1
 80058d4:	6838      	ldr	r0, [r7, #0]
 80058d6:	f000 fb91 	bl	8005ffc <prvAddCurrentTaskToDelayedList>
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	2000086c 	.word	0x2000086c

080058e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	617b      	str	r3, [r7, #20]
}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	e7fd      	b.n	800590e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005912:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <vTaskPlaceOnEventListRestricted+0x54>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3318      	adds	r3, #24
 8005918:	4619      	mov	r1, r3
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7fe fb87 	bl	800402e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005926:	f04f 33ff 	mov.w	r3, #4294967295
 800592a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	68b8      	ldr	r0, [r7, #8]
 8005930:	f000 fb64 	bl	8005ffc <prvAddCurrentTaskToDelayedList>
	}
 8005934:	bf00      	nop
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	2000086c 	.word	0x2000086c

08005940 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10b      	bne.n	800596e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	60fb      	str	r3, [r7, #12]
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	e7fd      	b.n	800596a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3318      	adds	r3, #24
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fbb8 	bl	80040e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005978:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <xTaskRemoveFromEventList+0xb0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11d      	bne.n	80059bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	3304      	adds	r3, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe fbaf 	bl	80040e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598e:	4b19      	ldr	r3, [pc, #100]	@ (80059f4 <xTaskRemoveFromEventList+0xb4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d903      	bls.n	800599e <xTaskRemoveFromEventList+0x5e>
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	4a16      	ldr	r2, [pc, #88]	@ (80059f4 <xTaskRemoveFromEventList+0xb4>)
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <xTaskRemoveFromEventList+0xb8>)
 80059ac:	441a      	add	r2, r3
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe fb3a 	bl	800402e <vListInsertEnd>
 80059ba:	e005      	b.n	80059c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3318      	adds	r3, #24
 80059c0:	4619      	mov	r1, r3
 80059c2:	480e      	ldr	r0, [pc, #56]	@ (80059fc <xTaskRemoveFromEventList+0xbc>)
 80059c4:	f7fe fb33 	bl	800402e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <xTaskRemoveFromEventList+0xc0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d905      	bls.n	80059e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059da:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <xTaskRemoveFromEventList+0xc4>)
 80059dc:	2201      	movs	r2, #1
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e001      	b.n	80059e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059e6:	697b      	ldr	r3, [r7, #20]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000d68 	.word	0x20000d68
 80059f4:	20000d48 	.word	0x20000d48
 80059f8:	20000870 	.word	0x20000870
 80059fc:	20000d00 	.word	0x20000d00
 8005a00:	2000086c 	.word	0x2000086c
 8005a04:	20000d54 	.word	0x20000d54

08005a08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a10:	4b06      	ldr	r3, [pc, #24]	@ (8005a2c <vTaskInternalSetTimeOutState+0x24>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a18:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <vTaskInternalSetTimeOutState+0x28>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	605a      	str	r2, [r3, #4]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	20000d58 	.word	0x20000d58
 8005a30:	20000d44 	.word	0x20000d44

08005a34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10b      	bne.n	8005a5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	613b      	str	r3, [r7, #16]
}
 8005a56:	bf00      	nop
 8005a58:	bf00      	nop
 8005a5a:	e7fd      	b.n	8005a58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	60fb      	str	r3, [r7, #12]
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a7a:	f000 ff9d 	bl	80069b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005af4 <xTaskCheckForTimeOut+0xc0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a96:	d102      	bne.n	8005a9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	e023      	b.n	8005ae6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b15      	ldr	r3, [pc, #84]	@ (8005af8 <xTaskCheckForTimeOut+0xc4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d007      	beq.n	8005aba <xTaskCheckForTimeOut+0x86>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d302      	bcc.n	8005aba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	e015      	b.n	8005ae6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d20b      	bcs.n	8005adc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff ff99 	bl	8005a08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	e004      	b.n	8005ae6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ae6:	f000 ff99 	bl	8006a1c <vPortExitCritical>

	return xReturn;
 8005aea:	69fb      	ldr	r3, [r7, #28]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000d44 	.word	0x20000d44
 8005af8:	20000d58 	.word	0x20000d58

08005afc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b00:	4b03      	ldr	r3, [pc, #12]	@ (8005b10 <vTaskMissedYield+0x14>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
}
 8005b06:	bf00      	nop
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	20000d54 	.word	0x20000d54

08005b14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b1c:	f000 f852 	bl	8005bc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b20:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <prvIdleTask+0x28>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d9f9      	bls.n	8005b1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b28:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <prvIdleTask+0x2c>)
 8005b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b38:	e7f0      	b.n	8005b1c <prvIdleTask+0x8>
 8005b3a:	bf00      	nop
 8005b3c:	20000870 	.word	0x20000870
 8005b40:	e000ed04 	.word	0xe000ed04

08005b44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	607b      	str	r3, [r7, #4]
 8005b4e:	e00c      	b.n	8005b6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ba4 <prvInitialiseTaskLists+0x60>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fa38 	bl	8003fd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3301      	adds	r3, #1
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b37      	cmp	r3, #55	@ 0x37
 8005b6e:	d9ef      	bls.n	8005b50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b70:	480d      	ldr	r0, [pc, #52]	@ (8005ba8 <prvInitialiseTaskLists+0x64>)
 8005b72:	f7fe fa2f 	bl	8003fd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b76:	480d      	ldr	r0, [pc, #52]	@ (8005bac <prvInitialiseTaskLists+0x68>)
 8005b78:	f7fe fa2c 	bl	8003fd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b7c:	480c      	ldr	r0, [pc, #48]	@ (8005bb0 <prvInitialiseTaskLists+0x6c>)
 8005b7e:	f7fe fa29 	bl	8003fd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b82:	480c      	ldr	r0, [pc, #48]	@ (8005bb4 <prvInitialiseTaskLists+0x70>)
 8005b84:	f7fe fa26 	bl	8003fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b88:	480b      	ldr	r0, [pc, #44]	@ (8005bb8 <prvInitialiseTaskLists+0x74>)
 8005b8a:	f7fe fa23 	bl	8003fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <prvInitialiseTaskLists+0x78>)
 8005b90:	4a05      	ldr	r2, [pc, #20]	@ (8005ba8 <prvInitialiseTaskLists+0x64>)
 8005b92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b94:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <prvInitialiseTaskLists+0x7c>)
 8005b96:	4a05      	ldr	r2, [pc, #20]	@ (8005bac <prvInitialiseTaskLists+0x68>)
 8005b98:	601a      	str	r2, [r3, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000870 	.word	0x20000870
 8005ba8:	20000cd0 	.word	0x20000cd0
 8005bac:	20000ce4 	.word	0x20000ce4
 8005bb0:	20000d00 	.word	0x20000d00
 8005bb4:	20000d14 	.word	0x20000d14
 8005bb8:	20000d2c 	.word	0x20000d2c
 8005bbc:	20000cf8 	.word	0x20000cf8
 8005bc0:	20000cfc 	.word	0x20000cfc

08005bc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bca:	e019      	b.n	8005c00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bcc:	f000 fef4 	bl	80069b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd0:	4b10      	ldr	r3, [pc, #64]	@ (8005c14 <prvCheckTasksWaitingTermination+0x50>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fa83 	bl	80040e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005be2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <prvCheckTasksWaitingTermination+0x54>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	4a0b      	ldr	r2, [pc, #44]	@ (8005c18 <prvCheckTasksWaitingTermination+0x54>)
 8005bea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bec:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <prvCheckTasksWaitingTermination+0x58>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <prvCheckTasksWaitingTermination+0x58>)
 8005bf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bf6:	f000 ff11 	bl	8006a1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f810 	bl	8005c20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <prvCheckTasksWaitingTermination+0x58>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e1      	bne.n	8005bcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000d14 	.word	0x20000d14
 8005c18:	20000d40 	.word	0x20000d40
 8005c1c:	20000d28 	.word	0x20000d28

08005c20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d108      	bne.n	8005c44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f8ae 	bl	8006d98 <vPortFree>
				vPortFree( pxTCB );
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 f8ab 	bl	8006d98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c42:	e019      	b.n	8005c78 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d103      	bne.n	8005c56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 f8a2 	bl	8006d98 <vPortFree>
	}
 8005c54:	e010      	b.n	8005c78 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d00b      	beq.n	8005c78 <prvDeleteTCB+0x58>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <prvDeleteTCB+0x54>
	}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c86:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb8 <prvResetNextTaskUnblockTime+0x38>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c90:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <prvResetNextTaskUnblockTime+0x3c>)
 8005c92:	f04f 32ff 	mov.w	r2, #4294967295
 8005c96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c98:	e008      	b.n	8005cac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9a:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <prvResetNextTaskUnblockTime+0x38>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4a04      	ldr	r2, [pc, #16]	@ (8005cbc <prvResetNextTaskUnblockTime+0x3c>)
 8005caa:	6013      	str	r3, [r2, #0]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	20000cf8 	.word	0x20000cf8
 8005cbc:	20000d60 	.word	0x20000d60

08005cc0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005cc6:	4b05      	ldr	r3, [pc, #20]	@ (8005cdc <xTaskGetCurrentTaskHandle+0x1c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005ccc:	687b      	ldr	r3, [r7, #4]
	}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	2000086c 	.word	0x2000086c

08005ce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d14 <xTaskGetSchedulerState+0x34>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	e008      	b.n	8005d06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf4:	4b08      	ldr	r3, [pc, #32]	@ (8005d18 <xTaskGetSchedulerState+0x38>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	e001      	b.n	8005d06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d02:	2300      	movs	r3, #0
 8005d04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d06:	687b      	ldr	r3, [r7, #4]
	}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	20000d4c 	.word	0x20000d4c
 8005d18:	20000d68 	.word	0x20000d68

08005d1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d051      	beq.n	8005dd6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d36:	4b2a      	ldr	r3, [pc, #168]	@ (8005de0 <xTaskPriorityInherit+0xc4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d241      	bcs.n	8005dc4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	db06      	blt.n	8005d56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d48:	4b25      	ldr	r3, [pc, #148]	@ (8005de0 <xTaskPriorityInherit+0xc4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6959      	ldr	r1, [r3, #20]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4a1f      	ldr	r2, [pc, #124]	@ (8005de4 <xTaskPriorityInherit+0xc8>)
 8005d68:	4413      	add	r3, r2
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	d122      	bne.n	8005db4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe f9b8 	bl	80040e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d78:	4b19      	ldr	r3, [pc, #100]	@ (8005de0 <xTaskPriorityInherit+0xc4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d86:	4b18      	ldr	r3, [pc, #96]	@ (8005de8 <xTaskPriorityInherit+0xcc>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d903      	bls.n	8005d96 <xTaskPriorityInherit+0x7a>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	4a15      	ldr	r2, [pc, #84]	@ (8005de8 <xTaskPriorityInherit+0xcc>)
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4a10      	ldr	r2, [pc, #64]	@ (8005de4 <xTaskPriorityInherit+0xc8>)
 8005da4:	441a      	add	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f7fe f93e 	bl	800402e <vListInsertEnd>
 8005db2:	e004      	b.n	8005dbe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005db4:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <xTaskPriorityInherit+0xc4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e008      	b.n	8005dd6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <xTaskPriorityInherit+0xc4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d201      	bcs.n	8005dd6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	2000086c 	.word	0x2000086c
 8005de4:	20000870 	.word	0x20000870
 8005de8:	20000d48 	.word	0x20000d48

08005dec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d058      	beq.n	8005eb4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e02:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec0 <xTaskPriorityDisinherit+0xd4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d00b      	beq.n	8005e24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	60fb      	str	r3, [r7, #12]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10b      	bne.n	8005e44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	60bb      	str	r3, [r7, #8]
}
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
 8005e42:	e7fd      	b.n	8005e40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e48:	1e5a      	subs	r2, r3, #1
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d02c      	beq.n	8005eb4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d128      	bne.n	8005eb4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe f93e 	bl	80040e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e84:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <xTaskPriorityDisinherit+0xd8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d903      	bls.n	8005e94 <xTaskPriorityDisinherit+0xa8>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec4 <xTaskPriorityDisinherit+0xd8>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4a09      	ldr	r2, [pc, #36]	@ (8005ec8 <xTaskPriorityDisinherit+0xdc>)
 8005ea2:	441a      	add	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7fe f8bf 	bl	800402e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005eb4:	697b      	ldr	r3, [r7, #20]
	}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2000086c 	.word	0x2000086c
 8005ec4:	20000d48 	.word	0x20000d48
 8005ec8:	20000870 	.word	0x20000870

08005ecc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005eda:	2301      	movs	r3, #1
 8005edc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d06c      	beq.n	8005fbe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	60fb      	str	r3, [r7, #12]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d902      	bls.n	8005f14 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	e002      	b.n	8005f1a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f18:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d04c      	beq.n	8005fbe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d147      	bne.n	8005fbe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f2e:	4b26      	ldr	r3, [pc, #152]	@ (8005fc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d10b      	bne.n	8005f50 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	60bb      	str	r3, [r7, #8]
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	db04      	blt.n	8005f6e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	6959      	ldr	r1, [r3, #20]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4a13      	ldr	r2, [pc, #76]	@ (8005fcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f7e:	4413      	add	r3, r2
 8005f80:	4299      	cmp	r1, r3
 8005f82:	d11c      	bne.n	8005fbe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fe f8ad 	bl	80040e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f92:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d903      	bls.n	8005fa2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a07      	ldr	r2, [pc, #28]	@ (8005fcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005fb0:	441a      	add	r2, r3
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7fe f838 	bl	800402e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fbe:	bf00      	nop
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	2000086c 	.word	0x2000086c
 8005fcc:	20000870 	.word	0x20000870
 8005fd0:	20000d48 	.word	0x20000d48

08005fd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fd8:	4b07      	ldr	r3, [pc, #28]	@ (8005ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fe0:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005fe6:	3201      	adds	r2, #1
 8005fe8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005fea:	4b03      	ldr	r3, [pc, #12]	@ (8005ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fec:	681b      	ldr	r3, [r3, #0]
	}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	2000086c 	.word	0x2000086c

08005ffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006006:	4b21      	ldr	r3, [pc, #132]	@ (800608c <prvAddCurrentTaskToDelayedList+0x90>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800600c:	4b20      	ldr	r3, [pc, #128]	@ (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3304      	adds	r3, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe f868 	bl	80040e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d10a      	bne.n	8006036 <prvAddCurrentTaskToDelayedList+0x3a>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006026:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4819      	ldr	r0, [pc, #100]	@ (8006094 <prvAddCurrentTaskToDelayedList+0x98>)
 8006030:	f7fd fffd 	bl	800402e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006034:	e026      	b.n	8006084 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4413      	add	r3, r2
 800603c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800603e:	4b14      	ldr	r3, [pc, #80]	@ (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	429a      	cmp	r2, r3
 800604c:	d209      	bcs.n	8006062 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604e:	4b12      	ldr	r3, [pc, #72]	@ (8006098 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b0f      	ldr	r3, [pc, #60]	@ (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f7fe f80b 	bl	8004076 <vListInsert>
}
 8006060:	e010      	b.n	8006084 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006062:	4b0e      	ldr	r3, [pc, #56]	@ (800609c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <prvAddCurrentTaskToDelayedList+0x94>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe f801 	bl	8004076 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006074:	4b0a      	ldr	r3, [pc, #40]	@ (80060a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	d202      	bcs.n	8006084 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800607e:	4a08      	ldr	r2, [pc, #32]	@ (80060a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6013      	str	r3, [r2, #0]
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000d44 	.word	0x20000d44
 8006090:	2000086c 	.word	0x2000086c
 8006094:	20000d2c 	.word	0x20000d2c
 8006098:	20000cfc 	.word	0x20000cfc
 800609c:	20000cf8 	.word	0x20000cf8
 80060a0:	20000d60 	.word	0x20000d60

080060a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	@ 0x28
 80060a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060ae:	f000 fb13 	bl	80066d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <xTimerCreateTimerTask+0x84>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d021      	beq.n	80060fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060c2:	1d3a      	adds	r2, r7, #4
 80060c4:	f107 0108 	add.w	r1, r7, #8
 80060c8:	f107 030c 	add.w	r3, r7, #12
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd ff67 	bl	8003fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	2302      	movs	r3, #2
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	460a      	mov	r2, r1
 80060e4:	4911      	ldr	r1, [pc, #68]	@ (800612c <xTimerCreateTimerTask+0x88>)
 80060e6:	4812      	ldr	r0, [pc, #72]	@ (8006130 <xTimerCreateTimerTask+0x8c>)
 80060e8:	f7fe ffc0 	bl	800506c <xTaskCreateStatic>
 80060ec:	4603      	mov	r3, r0
 80060ee:	4a11      	ldr	r2, [pc, #68]	@ (8006134 <xTimerCreateTimerTask+0x90>)
 80060f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060f2:	4b10      	ldr	r3, [pc, #64]	@ (8006134 <xTimerCreateTimerTask+0x90>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060fa:	2301      	movs	r3, #1
 80060fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	613b      	str	r3, [r7, #16]
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	e7fd      	b.n	8006118 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800611c:	697b      	ldr	r3, [r7, #20]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000d9c 	.word	0x20000d9c
 800612c:	080079c0 	.word	0x080079c0
 8006130:	08006271 	.word	0x08006271
 8006134:	20000da0 	.word	0x20000da0

08006138 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	@ 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006146:	2300      	movs	r3, #0
 8006148:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <xTimerGenericCommand+0x30>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006168:	4b19      	ldr	r3, [pc, #100]	@ (80061d0 <xTimerGenericCommand+0x98>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d02a      	beq.n	80061c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b05      	cmp	r3, #5
 8006180:	dc18      	bgt.n	80061b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006182:	f7ff fdad 	bl	8005ce0 <xTaskGetSchedulerState>
 8006186:	4603      	mov	r3, r0
 8006188:	2b02      	cmp	r3, #2
 800618a:	d109      	bne.n	80061a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800618c:	4b10      	ldr	r3, [pc, #64]	@ (80061d0 <xTimerGenericCommand+0x98>)
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	f107 0110 	add.w	r1, r7, #16
 8006194:	2300      	movs	r3, #0
 8006196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006198:	f7fe f9ce 	bl	8004538 <xQueueGenericSend>
 800619c:	6278      	str	r0, [r7, #36]	@ 0x24
 800619e:	e012      	b.n	80061c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061a0:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <xTimerGenericCommand+0x98>)
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	f107 0110 	add.w	r1, r7, #16
 80061a8:	2300      	movs	r3, #0
 80061aa:	2200      	movs	r2, #0
 80061ac:	f7fe f9c4 	bl	8004538 <xQueueGenericSend>
 80061b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80061b2:	e008      	b.n	80061c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061b4:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <xTimerGenericCommand+0x98>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	f107 0110 	add.w	r1, r7, #16
 80061bc:	2300      	movs	r3, #0
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	f7fe fabc 	bl	800473c <xQueueGenericSendFromISR>
 80061c4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3728      	adds	r7, #40	@ 0x28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000d9c 	.word	0x20000d9c

080061d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af02      	add	r7, sp, #8
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061de:	4b23      	ldr	r3, [pc, #140]	@ (800626c <prvProcessExpiredTimer+0x98>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fd ff7b 	bl	80040e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d023      	beq.n	8006248 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	699a      	ldr	r2, [r3, #24]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	18d1      	adds	r1, r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	6978      	ldr	r0, [r7, #20]
 800620e:	f000 f8d5 	bl	80063bc <prvInsertTimerInActiveList>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d020      	beq.n	800625a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006218:	2300      	movs	r3, #0
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	2300      	movs	r3, #0
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	2100      	movs	r1, #0
 8006222:	6978      	ldr	r0, [r7, #20]
 8006224:	f7ff ff88 	bl	8006138 <xTimerGenericCommand>
 8006228:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d114      	bne.n	800625a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	60fb      	str	r3, [r7, #12]
}
 8006242:	bf00      	nop
 8006244:	bf00      	nop
 8006246:	e7fd      	b.n	8006244 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	b2da      	uxtb	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	6978      	ldr	r0, [r7, #20]
 8006260:	4798      	blx	r3
}
 8006262:	bf00      	nop
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000d94 	.word	0x20000d94

08006270 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006278:	f107 0308 	add.w	r3, r7, #8
 800627c:	4618      	mov	r0, r3
 800627e:	f000 f859 	bl	8006334 <prvGetNextExpireTime>
 8006282:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f805 	bl	8006298 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800628e:	f000 f8d7 	bl	8006440 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006292:	bf00      	nop
 8006294:	e7f0      	b.n	8006278 <prvTimerTask+0x8>
	...

08006298 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062a2:	f7ff f927 	bl	80054f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062a6:	f107 0308 	add.w	r3, r7, #8
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f866 	bl	800637c <prvSampleTimeNow>
 80062b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d130      	bne.n	800631a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <prvProcessTimerOrBlockTask+0x3c>
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d806      	bhi.n	80062d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062c6:	f7ff f923 	bl	8005510 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ff81 	bl	80061d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062d2:	e024      	b.n	800631e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d008      	beq.n	80062ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062da:	4b13      	ldr	r3, [pc, #76]	@ (8006328 <prvProcessTimerOrBlockTask+0x90>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <prvProcessTimerOrBlockTask+0x50>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <prvProcessTimerOrBlockTask+0x52>
 80062e8:	2300      	movs	r3, #0
 80062ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062ec:	4b0f      	ldr	r3, [pc, #60]	@ (800632c <prvProcessTimerOrBlockTask+0x94>)
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	4619      	mov	r1, r3
 80062fa:	f7fe fe83 	bl	8005004 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062fe:	f7ff f907 	bl	8005510 <xTaskResumeAll>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006308:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <prvProcessTimerOrBlockTask+0x98>)
 800630a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	f3bf 8f6f 	isb	sy
}
 8006318:	e001      	b.n	800631e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800631a:	f7ff f8f9 	bl	8005510 <xTaskResumeAll>
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000d98 	.word	0x20000d98
 800632c:	20000d9c 	.word	0x20000d9c
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800633c:	4b0e      	ldr	r3, [pc, #56]	@ (8006378 <prvGetNextExpireTime+0x44>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <prvGetNextExpireTime+0x16>
 8006346:	2201      	movs	r2, #1
 8006348:	e000      	b.n	800634c <prvGetNextExpireTime+0x18>
 800634a:	2200      	movs	r2, #0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006358:	4b07      	ldr	r3, [pc, #28]	@ (8006378 <prvGetNextExpireTime+0x44>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e001      	b.n	8006368 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006368:	68fb      	ldr	r3, [r7, #12]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000d94 	.word	0x20000d94

0800637c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006384:	f7ff f962 	bl	800564c <xTaskGetTickCount>
 8006388:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800638a:	4b0b      	ldr	r3, [pc, #44]	@ (80063b8 <prvSampleTimeNow+0x3c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	429a      	cmp	r2, r3
 8006392:	d205      	bcs.n	80063a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006394:	f000 f93a 	bl	800660c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e002      	b.n	80063a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063a6:	4a04      	ldr	r2, [pc, #16]	@ (80063b8 <prvSampleTimeNow+0x3c>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063ac:	68fb      	ldr	r3, [r7, #12]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000da4 	.word	0x20000da4

080063bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d812      	bhi.n	8006408 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d302      	bcc.n	80063f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063f0:	2301      	movs	r3, #1
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e01b      	b.n	800642e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063f6:	4b10      	ldr	r3, [pc, #64]	@ (8006438 <prvInsertTimerInActiveList+0x7c>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fd fe38 	bl	8004076 <vListInsert>
 8006406:	e012      	b.n	800642e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d206      	bcs.n	800641e <prvInsertTimerInActiveList+0x62>
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d302      	bcc.n	800641e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006418:	2301      	movs	r3, #1
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	e007      	b.n	800642e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800641e:	4b07      	ldr	r3, [pc, #28]	@ (800643c <prvInsertTimerInActiveList+0x80>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3304      	adds	r3, #4
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f7fd fe24 	bl	8004076 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800642e:	697b      	ldr	r3, [r7, #20]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20000d98 	.word	0x20000d98
 800643c:	20000d94 	.word	0x20000d94

08006440 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08e      	sub	sp, #56	@ 0x38
 8006444:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006446:	e0ce      	b.n	80065e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	da19      	bge.n	8006482 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800644e:	1d3b      	adds	r3, r7, #4
 8006450:	3304      	adds	r3, #4
 8006452:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	61fb      	str	r3, [r7, #28]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006478:	6850      	ldr	r0, [r2, #4]
 800647a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800647c:	6892      	ldr	r2, [r2, #8]
 800647e:	4611      	mov	r1, r2
 8006480:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f2c0 80ae 	blt.w	80065e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800648e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	3304      	adds	r3, #4
 800649a:	4618      	mov	r0, r3
 800649c:	f7fd fe24 	bl	80040e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064a0:	463b      	mov	r3, r7
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff ff6a 	bl	800637c <prvSampleTimeNow>
 80064a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b09      	cmp	r3, #9
 80064ae:	f200 8097 	bhi.w	80065e0 <prvProcessReceivedCommands+0x1a0>
 80064b2:	a201      	add	r2, pc, #4	@ (adr r2, 80064b8 <prvProcessReceivedCommands+0x78>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	080064e1 	.word	0x080064e1
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e1 	.word	0x080064e1
 80064c4:	08006557 	.word	0x08006557
 80064c8:	0800656b 	.word	0x0800656b
 80064cc:	080065b7 	.word	0x080065b7
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	080064e1 	.word	0x080064e1
 80064d8:	08006557 	.word	0x08006557
 80064dc:	0800656b 	.word	0x0800656b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	18d1      	adds	r1, r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006500:	f7ff ff5c 	bl	80063bc <prvInsertTimerInActiveList>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d06c      	beq.n	80065e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800650a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006510:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d061      	beq.n	80065e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	441a      	add	r2, r3
 8006528:	2300      	movs	r3, #0
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	2300      	movs	r3, #0
 800652e:	2100      	movs	r1, #0
 8006530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006532:	f7ff fe01 	bl	8006138 <xTimerGenericCommand>
 8006536:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d152      	bne.n	80065e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	61bb      	str	r3, [r7, #24]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006568:	e03d      	b.n	80065e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	617b      	str	r3, [r7, #20]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	18d1      	adds	r1, r2, r3
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b0:	f7ff ff04 	bl	80063bc <prvInsertTimerInActiveList>
					break;
 80065b4:	e017      	b.n	80065e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80065c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065c6:	f000 fbe7 	bl	8006d98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ca:	e00c      	b.n	80065e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065de:	e002      	b.n	80065e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80065e0:	bf00      	nop
 80065e2:	e000      	b.n	80065e6 <prvProcessReceivedCommands+0x1a6>
					break;
 80065e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065e6:	4b08      	ldr	r3, [pc, #32]	@ (8006608 <prvProcessReceivedCommands+0x1c8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	1d39      	adds	r1, r7, #4
 80065ec:	2200      	movs	r2, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe f942 	bl	8004878 <xQueueReceive>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f47f af26 	bne.w	8006448 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	3730      	adds	r7, #48	@ 0x30
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000d9c 	.word	0x20000d9c

0800660c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006612:	e049      	b.n	80066a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006614:	4b2e      	ldr	r3, [pc, #184]	@ (80066d0 <prvSwitchTimerLists+0xc4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800661e:	4b2c      	ldr	r3, [pc, #176]	@ (80066d0 <prvSwitchTimerLists+0xc4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3304      	adds	r3, #4
 800662c:	4618      	mov	r0, r3
 800662e:	f7fd fd5b 	bl	80040e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d02f      	beq.n	80066a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	429a      	cmp	r2, r3
 8006658:	d90e      	bls.n	8006678 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006666:	4b1a      	ldr	r3, [pc, #104]	@ (80066d0 <prvSwitchTimerLists+0xc4>)
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7fd fd00 	bl	8004076 <vListInsert>
 8006676:	e017      	b.n	80066a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006678:	2300      	movs	r3, #0
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	2300      	movs	r3, #0
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	2100      	movs	r1, #0
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff fd58 	bl	8006138 <xTimerGenericCommand>
 8006688:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	603b      	str	r3, [r7, #0]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066a8:	4b09      	ldr	r3, [pc, #36]	@ (80066d0 <prvSwitchTimerLists+0xc4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1b0      	bne.n	8006614 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066b2:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <prvSwitchTimerLists+0xc4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066b8:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <prvSwitchTimerLists+0xc8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a04      	ldr	r2, [pc, #16]	@ (80066d0 <prvSwitchTimerLists+0xc4>)
 80066be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066c0:	4a04      	ldr	r2, [pc, #16]	@ (80066d4 <prvSwitchTimerLists+0xc8>)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	6013      	str	r3, [r2, #0]
}
 80066c6:	bf00      	nop
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000d94 	.word	0x20000d94
 80066d4:	20000d98 	.word	0x20000d98

080066d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066de:	f000 f96b 	bl	80069b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066e2:	4b15      	ldr	r3, [pc, #84]	@ (8006738 <prvCheckForValidListAndQueue+0x60>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d120      	bne.n	800672c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ea:	4814      	ldr	r0, [pc, #80]	@ (800673c <prvCheckForValidListAndQueue+0x64>)
 80066ec:	f7fd fc72 	bl	8003fd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066f0:	4813      	ldr	r0, [pc, #76]	@ (8006740 <prvCheckForValidListAndQueue+0x68>)
 80066f2:	f7fd fc6f 	bl	8003fd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066f6:	4b13      	ldr	r3, [pc, #76]	@ (8006744 <prvCheckForValidListAndQueue+0x6c>)
 80066f8:	4a10      	ldr	r2, [pc, #64]	@ (800673c <prvCheckForValidListAndQueue+0x64>)
 80066fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066fc:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <prvCheckForValidListAndQueue+0x70>)
 80066fe:	4a10      	ldr	r2, [pc, #64]	@ (8006740 <prvCheckForValidListAndQueue+0x68>)
 8006700:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006702:	2300      	movs	r3, #0
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	4b11      	ldr	r3, [pc, #68]	@ (800674c <prvCheckForValidListAndQueue+0x74>)
 8006708:	4a11      	ldr	r2, [pc, #68]	@ (8006750 <prvCheckForValidListAndQueue+0x78>)
 800670a:	2110      	movs	r1, #16
 800670c:	200a      	movs	r0, #10
 800670e:	f7fd fd7f 	bl	8004210 <xQueueGenericCreateStatic>
 8006712:	4603      	mov	r3, r0
 8006714:	4a08      	ldr	r2, [pc, #32]	@ (8006738 <prvCheckForValidListAndQueue+0x60>)
 8006716:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006718:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <prvCheckForValidListAndQueue+0x60>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006720:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <prvCheckForValidListAndQueue+0x60>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	490b      	ldr	r1, [pc, #44]	@ (8006754 <prvCheckForValidListAndQueue+0x7c>)
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fc42 	bl	8004fb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800672c:	f000 f976 	bl	8006a1c <vPortExitCritical>
}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000d9c 	.word	0x20000d9c
 800673c:	20000d6c 	.word	0x20000d6c
 8006740:	20000d80 	.word	0x20000d80
 8006744:	20000d94 	.word	0x20000d94
 8006748:	20000d98 	.word	0x20000d98
 800674c:	20000e48 	.word	0x20000e48
 8006750:	20000da8 	.word	0x20000da8
 8006754:	080079c8 	.word	0x080079c8

08006758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3b04      	subs	r3, #4
 8006768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b04      	subs	r3, #4
 8006776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f023 0201 	bic.w	r2, r3, #1
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3b04      	subs	r3, #4
 8006786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006788:	4a0c      	ldr	r2, [pc, #48]	@ (80067bc <pxPortInitialiseStack+0x64>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3b14      	subs	r3, #20
 8006792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3b04      	subs	r3, #4
 800679e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f06f 0202 	mvn.w	r2, #2
 80067a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3b20      	subs	r3, #32
 80067ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067ae:	68fb      	ldr	r3, [r7, #12]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	080067c1 	.word	0x080067c1

080067c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ca:	4b13      	ldr	r3, [pc, #76]	@ (8006818 <prvTaskExitError+0x58>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d00b      	beq.n	80067ec <prvTaskExitError+0x2c>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	60fb      	str	r3, [r7, #12]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <prvTaskExitError+0x28>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	60bb      	str	r3, [r7, #8]
}
 80067fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006800:	bf00      	nop
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0fc      	beq.n	8006802 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000008 	.word	0x20000008
 800681c:	00000000 	.word	0x00000000

08006820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006820:	4b07      	ldr	r3, [pc, #28]	@ (8006840 <pxCurrentTCBConst2>)
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f380 8809 	msr	PSP, r0
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8811 	msr	BASEPRI, r0
 800683a:	4770      	bx	lr
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst2>:
 8006840:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006848:	4808      	ldr	r0, [pc, #32]	@ (800686c <prvPortStartFirstTask+0x24>)
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f380 8808 	msr	MSP, r0
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8814 	msr	CONTROL, r0
 800685a:	b662      	cpsie	i
 800685c:	b661      	cpsie	f
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	df00      	svc	0
 8006868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800686a:	bf00      	nop
 800686c:	e000ed08 	.word	0xe000ed08

08006870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006876:	4b47      	ldr	r3, [pc, #284]	@ (8006994 <xPortStartScheduler+0x124>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a47      	ldr	r2, [pc, #284]	@ (8006998 <xPortStartScheduler+0x128>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d10b      	bne.n	8006898 <xPortStartScheduler+0x28>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	613b      	str	r3, [r7, #16]
}
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006898:	4b3e      	ldr	r3, [pc, #248]	@ (8006994 <xPortStartScheduler+0x124>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a3f      	ldr	r2, [pc, #252]	@ (800699c <xPortStartScheduler+0x12c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10b      	bne.n	80068ba <xPortStartScheduler+0x4a>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60fb      	str	r3, [r7, #12]
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	e7fd      	b.n	80068b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068ba:	4b39      	ldr	r3, [pc, #228]	@ (80069a0 <xPortStartScheduler+0x130>)
 80068bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	22ff      	movs	r2, #255	@ 0xff
 80068ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4b31      	ldr	r3, [pc, #196]	@ (80069a4 <xPortStartScheduler+0x134>)
 80068e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068e2:	4b31      	ldr	r3, [pc, #196]	@ (80069a8 <xPortStartScheduler+0x138>)
 80068e4:	2207      	movs	r2, #7
 80068e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068e8:	e009      	b.n	80068fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80068ea:	4b2f      	ldr	r3, [pc, #188]	@ (80069a8 <xPortStartScheduler+0x138>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	4a2d      	ldr	r2, [pc, #180]	@ (80069a8 <xPortStartScheduler+0x138>)
 80068f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006906:	2b80      	cmp	r3, #128	@ 0x80
 8006908:	d0ef      	beq.n	80068ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800690a:	4b27      	ldr	r3, [pc, #156]	@ (80069a8 <xPortStartScheduler+0x138>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1c3 0307 	rsb	r3, r3, #7
 8006912:	2b04      	cmp	r3, #4
 8006914:	d00b      	beq.n	800692e <xPortStartScheduler+0xbe>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60bb      	str	r3, [r7, #8]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800692e:	4b1e      	ldr	r3, [pc, #120]	@ (80069a8 <xPortStartScheduler+0x138>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	4a1c      	ldr	r2, [pc, #112]	@ (80069a8 <xPortStartScheduler+0x138>)
 8006936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006938:	4b1b      	ldr	r3, [pc, #108]	@ (80069a8 <xPortStartScheduler+0x138>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006940:	4a19      	ldr	r2, [pc, #100]	@ (80069a8 <xPortStartScheduler+0x138>)
 8006942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800694c:	4b17      	ldr	r3, [pc, #92]	@ (80069ac <xPortStartScheduler+0x13c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a16      	ldr	r2, [pc, #88]	@ (80069ac <xPortStartScheduler+0x13c>)
 8006952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006958:	4b14      	ldr	r3, [pc, #80]	@ (80069ac <xPortStartScheduler+0x13c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a13      	ldr	r2, [pc, #76]	@ (80069ac <xPortStartScheduler+0x13c>)
 800695e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006964:	f000 f8da 	bl	8006b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006968:	4b11      	ldr	r3, [pc, #68]	@ (80069b0 <xPortStartScheduler+0x140>)
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800696e:	f000 f8f9 	bl	8006b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006972:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <xPortStartScheduler+0x144>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a0f      	ldr	r2, [pc, #60]	@ (80069b4 <xPortStartScheduler+0x144>)
 8006978:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800697c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800697e:	f7ff ff63 	bl	8006848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006982:	f7fe ff2d 	bl	80057e0 <vTaskSwitchContext>
	prvTaskExitError();
 8006986:	f7ff ff1b 	bl	80067c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	e000ed00 	.word	0xe000ed00
 8006998:	410fc271 	.word	0x410fc271
 800699c:	410fc270 	.word	0x410fc270
 80069a0:	e000e400 	.word	0xe000e400
 80069a4:	20000e98 	.word	0x20000e98
 80069a8:	20000e9c 	.word	0x20000e9c
 80069ac:	e000ed20 	.word	0xe000ed20
 80069b0:	20000008 	.word	0x20000008
 80069b4:	e000ef34 	.word	0xe000ef34

080069b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	607b      	str	r3, [r7, #4]
}
 80069d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069d2:	4b10      	ldr	r3, [pc, #64]	@ (8006a14 <vPortEnterCritical+0x5c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3301      	adds	r3, #1
 80069d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006a14 <vPortEnterCritical+0x5c>)
 80069da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006a14 <vPortEnterCritical+0x5c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d110      	bne.n	8006a06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a18 <vPortEnterCritical+0x60>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <vPortEnterCritical+0x4e>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	603b      	str	r3, [r7, #0]
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	e7fd      	b.n	8006a02 <vPortEnterCritical+0x4a>
	}
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20000008 	.word	0x20000008
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a22:	4b12      	ldr	r3, [pc, #72]	@ (8006a6c <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <vPortExitCritical+0x26>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	607b      	str	r3, [r7, #4]
}
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	e7fd      	b.n	8006a3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a42:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <vPortExitCritical+0x50>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	4a08      	ldr	r2, [pc, #32]	@ (8006a6c <vPortExitCritical+0x50>)
 8006a4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a4c:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <vPortExitCritical+0x50>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <vPortExitCritical+0x44>
 8006a54:	2300      	movs	r3, #0
 8006a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	f383 8811 	msr	BASEPRI, r3
}
 8006a5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	20000008 	.word	0x20000008

08006a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a70:	f3ef 8009 	mrs	r0, PSP
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4b15      	ldr	r3, [pc, #84]	@ (8006ad0 <pxCurrentTCBConst>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	f01e 0f10 	tst.w	lr, #16
 8006a80:	bf08      	it	eq
 8006a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8a:	6010      	str	r0, [r2, #0]
 8006a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a94:	f380 8811 	msr	BASEPRI, r0
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f7fe fe9e 	bl	80057e0 <vTaskSwitchContext>
 8006aa4:	f04f 0000 	mov.w	r0, #0
 8006aa8:	f380 8811 	msr	BASEPRI, r0
 8006aac:	bc09      	pop	{r0, r3}
 8006aae:	6819      	ldr	r1, [r3, #0]
 8006ab0:	6808      	ldr	r0, [r1, #0]
 8006ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab6:	f01e 0f10 	tst.w	lr, #16
 8006aba:	bf08      	it	eq
 8006abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ac0:	f380 8809 	msr	PSP, r0
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	f3af 8000 	nop.w

08006ad0 <pxCurrentTCBConst>:
 8006ad0:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop

08006ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	607b      	str	r3, [r7, #4]
}
 8006af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006af2:	f7fe fdbb 	bl	800566c <xTaskIncrementTick>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006afc:	4b06      	ldr	r3, [pc, #24]	@ (8006b18 <xPortSysTickHandler+0x40>)
 8006afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	2300      	movs	r3, #0
 8006b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f383 8811 	msr	BASEPRI, r3
}
 8006b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <vPortSetupTimerInterrupt+0x34>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b26:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <vPortSetupTimerInterrupt+0x38>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <vPortSetupTimerInterrupt+0x3c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a0a      	ldr	r2, [pc, #40]	@ (8006b5c <vPortSetupTimerInterrupt+0x40>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	4a09      	ldr	r2, [pc, #36]	@ (8006b60 <vPortSetupTimerInterrupt+0x44>)
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b3e:	4b04      	ldr	r3, [pc, #16]	@ (8006b50 <vPortSetupTimerInterrupt+0x34>)
 8006b40:	2207      	movs	r2, #7
 8006b42:	601a      	str	r2, [r3, #0]
}
 8006b44:	bf00      	nop
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	e000e010 	.word	0xe000e010
 8006b54:	e000e018 	.word	0xe000e018
 8006b58:	20000000 	.word	0x20000000
 8006b5c:	10624dd3 	.word	0x10624dd3
 8006b60:	e000e014 	.word	0xe000e014

08006b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b74 <vPortEnableVFP+0x10>
 8006b68:	6801      	ldr	r1, [r0, #0]
 8006b6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b6e:	6001      	str	r1, [r0, #0]
 8006b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b72:	bf00      	nop
 8006b74:	e000ed88 	.word	0xe000ed88

08006b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b7e:	f3ef 8305 	mrs	r3, IPSR
 8006b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	d915      	bls.n	8006bb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b8a:	4a18      	ldr	r2, [pc, #96]	@ (8006bec <vPortValidateInterruptPriority+0x74>)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b94:	4b16      	ldr	r3, [pc, #88]	@ (8006bf0 <vPortValidateInterruptPriority+0x78>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	7afa      	ldrb	r2, [r7, #11]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d20b      	bcs.n	8006bb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf4 <vPortValidateInterruptPriority+0x7c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006bf8 <vPortValidateInterruptPriority+0x80>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d90b      	bls.n	8006bde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	603b      	str	r3, [r7, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	e7fd      	b.n	8006bda <vPortValidateInterruptPriority+0x62>
	}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	e000e3f0 	.word	0xe000e3f0
 8006bf0:	20000e98 	.word	0x20000e98
 8006bf4:	e000ed0c 	.word	0xe000ed0c
 8006bf8:	20000e9c 	.word	0x20000e9c

08006bfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	@ 0x28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c08:	f7fe fc74 	bl	80054f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8006d80 <pvPortMalloc+0x184>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c14:	f000 f924 	bl	8006e60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c18:	4b5a      	ldr	r3, [pc, #360]	@ (8006d84 <pvPortMalloc+0x188>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 8095 	bne.w	8006d50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01e      	beq.n	8006c6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d015      	beq.n	8006c6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f023 0307 	bic.w	r3, r3, #7
 8006c44:	3308      	adds	r3, #8
 8006c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <pvPortMalloc+0x6e>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	617b      	str	r3, [r7, #20]
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	e7fd      	b.n	8006c66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d06f      	beq.n	8006d50 <pvPortMalloc+0x154>
 8006c70:	4b45      	ldr	r3, [pc, #276]	@ (8006d88 <pvPortMalloc+0x18c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d86a      	bhi.n	8006d50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c7a:	4b44      	ldr	r3, [pc, #272]	@ (8006d8c <pvPortMalloc+0x190>)
 8006c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c7e:	4b43      	ldr	r3, [pc, #268]	@ (8006d8c <pvPortMalloc+0x190>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c84:	e004      	b.n	8006c90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d903      	bls.n	8006ca2 <pvPortMalloc+0xa6>
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f1      	bne.n	8006c86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ca2:	4b37      	ldr	r3, [pc, #220]	@ (8006d80 <pvPortMalloc+0x184>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d051      	beq.n	8006d50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	4413      	add	r3, r2
 8006cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	1ad2      	subs	r2, r2, r3
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d920      	bls.n	8006d10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	613b      	str	r3, [r7, #16]
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	e7fd      	b.n	8006cf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d0a:	69b8      	ldr	r0, [r7, #24]
 8006d0c:	f000 f90a 	bl	8006f24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d10:	4b1d      	ldr	r3, [pc, #116]	@ (8006d88 <pvPortMalloc+0x18c>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <pvPortMalloc+0x18c>)
 8006d1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d88 <pvPortMalloc+0x18c>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b1b      	ldr	r3, [pc, #108]	@ (8006d90 <pvPortMalloc+0x194>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d203      	bcs.n	8006d32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d2a:	4b17      	ldr	r3, [pc, #92]	@ (8006d88 <pvPortMalloc+0x18c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a18      	ldr	r2, [pc, #96]	@ (8006d90 <pvPortMalloc+0x194>)
 8006d30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	4b13      	ldr	r3, [pc, #76]	@ (8006d84 <pvPortMalloc+0x188>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d46:	4b13      	ldr	r3, [pc, #76]	@ (8006d94 <pvPortMalloc+0x198>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4a11      	ldr	r2, [pc, #68]	@ (8006d94 <pvPortMalloc+0x198>)
 8006d4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d50:	f7fe fbde 	bl	8005510 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <pvPortMalloc+0x17a>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	e7fd      	b.n	8006d72 <pvPortMalloc+0x176>
	return pvReturn;
 8006d76:	69fb      	ldr	r3, [r7, #28]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3728      	adds	r7, #40	@ 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20001a60 	.word	0x20001a60
 8006d84:	20001a74 	.word	0x20001a74
 8006d88:	20001a64 	.word	0x20001a64
 8006d8c:	20001a58 	.word	0x20001a58
 8006d90:	20001a68 	.word	0x20001a68
 8006d94:	20001a6c 	.word	0x20001a6c

08006d98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d04f      	beq.n	8006e4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006daa:	2308      	movs	r3, #8
 8006dac:	425b      	negs	r3, r3
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4413      	add	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	4b25      	ldr	r3, [pc, #148]	@ (8006e54 <vPortFree+0xbc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10b      	bne.n	8006dde <vPortFree+0x46>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60fb      	str	r3, [r7, #12]
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	e7fd      	b.n	8006dda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <vPortFree+0x66>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60bb      	str	r3, [r7, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	4b14      	ldr	r3, [pc, #80]	@ (8006e54 <vPortFree+0xbc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01e      	beq.n	8006e4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d11a      	bne.n	8006e4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	4b0e      	ldr	r3, [pc, #56]	@ (8006e54 <vPortFree+0xbc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	401a      	ands	r2, r3
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e24:	f7fe fb66 	bl	80054f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <vPortFree+0xc0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4413      	add	r3, r2
 8006e32:	4a09      	ldr	r2, [pc, #36]	@ (8006e58 <vPortFree+0xc0>)
 8006e34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e36:	6938      	ldr	r0, [r7, #16]
 8006e38:	f000 f874 	bl	8006f24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e3c:	4b07      	ldr	r3, [pc, #28]	@ (8006e5c <vPortFree+0xc4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3301      	adds	r3, #1
 8006e42:	4a06      	ldr	r2, [pc, #24]	@ (8006e5c <vPortFree+0xc4>)
 8006e44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e46:	f7fe fb63 	bl	8005510 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e4a:	bf00      	nop
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20001a74 	.word	0x20001a74
 8006e58:	20001a64 	.word	0x20001a64
 8006e5c:	20001a70 	.word	0x20001a70

08006e60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e66:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006e6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e6c:	4b27      	ldr	r3, [pc, #156]	@ (8006f0c <prvHeapInit+0xac>)
 8006e6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00c      	beq.n	8006e94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3307      	adds	r3, #7
 8006e7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0307 	bic.w	r3, r3, #7
 8006e86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f0c <prvHeapInit+0xac>)
 8006e90:	4413      	add	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e98:	4a1d      	ldr	r2, [pc, #116]	@ (8006f10 <prvHeapInit+0xb0>)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8006f10 <prvHeapInit+0xb0>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006eac:	2208      	movs	r2, #8
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0307 	bic.w	r3, r3, #7
 8006eba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4a15      	ldr	r2, [pc, #84]	@ (8006f14 <prvHeapInit+0xb4>)
 8006ec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ec2:	4b14      	ldr	r3, [pc, #80]	@ (8006f14 <prvHeapInit+0xb4>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eca:	4b12      	ldr	r3, [pc, #72]	@ (8006f14 <prvHeapInit+0xb4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	1ad2      	subs	r2, r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f14 <prvHeapInit+0xb4>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4a0a      	ldr	r2, [pc, #40]	@ (8006f18 <prvHeapInit+0xb8>)
 8006eee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4a09      	ldr	r2, [pc, #36]	@ (8006f1c <prvHeapInit+0xbc>)
 8006ef6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ef8:	4b09      	ldr	r3, [pc, #36]	@ (8006f20 <prvHeapInit+0xc0>)
 8006efa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006efe:	601a      	str	r2, [r3, #0]
}
 8006f00:	bf00      	nop
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	20000ea0 	.word	0x20000ea0
 8006f10:	20001a58 	.word	0x20001a58
 8006f14:	20001a60 	.word	0x20001a60
 8006f18:	20001a68 	.word	0x20001a68
 8006f1c:	20001a64 	.word	0x20001a64
 8006f20:	20001a74 	.word	0x20001a74

08006f24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f2c:	4b28      	ldr	r3, [pc, #160]	@ (8006fd0 <prvInsertBlockIntoFreeList+0xac>)
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e002      	b.n	8006f38 <prvInsertBlockIntoFreeList+0x14>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d8f7      	bhi.n	8006f32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d108      	bne.n	8006f66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	441a      	add	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d118      	bne.n	8006fac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4b15      	ldr	r3, [pc, #84]	@ (8006fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d00d      	beq.n	8006fa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	441a      	add	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e008      	b.n	8006fb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e003      	b.n	8006fb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d002      	beq.n	8006fc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fc2:	bf00      	nop
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20001a58 	.word	0x20001a58
 8006fd4:	20001a60 	.word	0x20001a60

08006fd8 <std>:
 8006fd8:	2300      	movs	r3, #0
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	4604      	mov	r4, r0
 8006fde:	e9c0 3300 	strd	r3, r3, [r0]
 8006fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fe6:	6083      	str	r3, [r0, #8]
 8006fe8:	8181      	strh	r1, [r0, #12]
 8006fea:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fec:	81c2      	strh	r2, [r0, #14]
 8006fee:	6183      	str	r3, [r0, #24]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	305c      	adds	r0, #92	@ 0x5c
 8006ff6:	f000 f9e7 	bl	80073c8 <memset>
 8006ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8007030 <std+0x58>)
 8006ffc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <std+0x5c>)
 8007000:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <std+0x60>)
 8007004:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <std+0x64>)
 8007008:	6323      	str	r3, [r4, #48]	@ 0x30
 800700a:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <std+0x68>)
 800700c:	6224      	str	r4, [r4, #32]
 800700e:	429c      	cmp	r4, r3
 8007010:	d006      	beq.n	8007020 <std+0x48>
 8007012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007016:	4294      	cmp	r4, r2
 8007018:	d002      	beq.n	8007020 <std+0x48>
 800701a:	33d0      	adds	r3, #208	@ 0xd0
 800701c:	429c      	cmp	r4, r3
 800701e:	d105      	bne.n	800702c <std+0x54>
 8007020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	f000 ba46 	b.w	80074b8 <__retarget_lock_init_recursive>
 800702c:	bd10      	pop	{r4, pc}
 800702e:	bf00      	nop
 8007030:	08007219 	.word	0x08007219
 8007034:	0800723b 	.word	0x0800723b
 8007038:	08007273 	.word	0x08007273
 800703c:	08007297 	.word	0x08007297
 8007040:	20001a78 	.word	0x20001a78

08007044 <stdio_exit_handler>:
 8007044:	4a02      	ldr	r2, [pc, #8]	@ (8007050 <stdio_exit_handler+0xc>)
 8007046:	4903      	ldr	r1, [pc, #12]	@ (8007054 <stdio_exit_handler+0x10>)
 8007048:	4803      	ldr	r0, [pc, #12]	@ (8007058 <stdio_exit_handler+0x14>)
 800704a:	f000 b869 	b.w	8007120 <_fwalk_sglue>
 800704e:	bf00      	nop
 8007050:	2000000c 	.word	0x2000000c
 8007054:	080077d5 	.word	0x080077d5
 8007058:	2000001c 	.word	0x2000001c

0800705c <cleanup_stdio>:
 800705c:	6841      	ldr	r1, [r0, #4]
 800705e:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <cleanup_stdio+0x34>)
 8007060:	4299      	cmp	r1, r3
 8007062:	b510      	push	{r4, lr}
 8007064:	4604      	mov	r4, r0
 8007066:	d001      	beq.n	800706c <cleanup_stdio+0x10>
 8007068:	f000 fbb4 	bl	80077d4 <_fflush_r>
 800706c:	68a1      	ldr	r1, [r4, #8]
 800706e:	4b09      	ldr	r3, [pc, #36]	@ (8007094 <cleanup_stdio+0x38>)
 8007070:	4299      	cmp	r1, r3
 8007072:	d002      	beq.n	800707a <cleanup_stdio+0x1e>
 8007074:	4620      	mov	r0, r4
 8007076:	f000 fbad 	bl	80077d4 <_fflush_r>
 800707a:	68e1      	ldr	r1, [r4, #12]
 800707c:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <cleanup_stdio+0x3c>)
 800707e:	4299      	cmp	r1, r3
 8007080:	d004      	beq.n	800708c <cleanup_stdio+0x30>
 8007082:	4620      	mov	r0, r4
 8007084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007088:	f000 bba4 	b.w	80077d4 <_fflush_r>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	20001a78 	.word	0x20001a78
 8007094:	20001ae0 	.word	0x20001ae0
 8007098:	20001b48 	.word	0x20001b48

0800709c <global_stdio_init.part.0>:
 800709c:	b510      	push	{r4, lr}
 800709e:	4b0b      	ldr	r3, [pc, #44]	@ (80070cc <global_stdio_init.part.0+0x30>)
 80070a0:	4c0b      	ldr	r4, [pc, #44]	@ (80070d0 <global_stdio_init.part.0+0x34>)
 80070a2:	4a0c      	ldr	r2, [pc, #48]	@ (80070d4 <global_stdio_init.part.0+0x38>)
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	4620      	mov	r0, r4
 80070a8:	2200      	movs	r2, #0
 80070aa:	2104      	movs	r1, #4
 80070ac:	f7ff ff94 	bl	8006fd8 <std>
 80070b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070b4:	2201      	movs	r2, #1
 80070b6:	2109      	movs	r1, #9
 80070b8:	f7ff ff8e 	bl	8006fd8 <std>
 80070bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070c0:	2202      	movs	r2, #2
 80070c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c6:	2112      	movs	r1, #18
 80070c8:	f7ff bf86 	b.w	8006fd8 <std>
 80070cc:	20001bb0 	.word	0x20001bb0
 80070d0:	20001a78 	.word	0x20001a78
 80070d4:	08007045 	.word	0x08007045

080070d8 <__sfp_lock_acquire>:
 80070d8:	4801      	ldr	r0, [pc, #4]	@ (80070e0 <__sfp_lock_acquire+0x8>)
 80070da:	f000 b9ee 	b.w	80074ba <__retarget_lock_acquire_recursive>
 80070de:	bf00      	nop
 80070e0:	20001bb9 	.word	0x20001bb9

080070e4 <__sfp_lock_release>:
 80070e4:	4801      	ldr	r0, [pc, #4]	@ (80070ec <__sfp_lock_release+0x8>)
 80070e6:	f000 b9e9 	b.w	80074bc <__retarget_lock_release_recursive>
 80070ea:	bf00      	nop
 80070ec:	20001bb9 	.word	0x20001bb9

080070f0 <__sinit>:
 80070f0:	b510      	push	{r4, lr}
 80070f2:	4604      	mov	r4, r0
 80070f4:	f7ff fff0 	bl	80070d8 <__sfp_lock_acquire>
 80070f8:	6a23      	ldr	r3, [r4, #32]
 80070fa:	b11b      	cbz	r3, 8007104 <__sinit+0x14>
 80070fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007100:	f7ff bff0 	b.w	80070e4 <__sfp_lock_release>
 8007104:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <__sinit+0x28>)
 8007106:	6223      	str	r3, [r4, #32]
 8007108:	4b04      	ldr	r3, [pc, #16]	@ (800711c <__sinit+0x2c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f5      	bne.n	80070fc <__sinit+0xc>
 8007110:	f7ff ffc4 	bl	800709c <global_stdio_init.part.0>
 8007114:	e7f2      	b.n	80070fc <__sinit+0xc>
 8007116:	bf00      	nop
 8007118:	0800705d 	.word	0x0800705d
 800711c:	20001bb0 	.word	0x20001bb0

08007120 <_fwalk_sglue>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4607      	mov	r7, r0
 8007126:	4688      	mov	r8, r1
 8007128:	4614      	mov	r4, r2
 800712a:	2600      	movs	r6, #0
 800712c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007130:	f1b9 0901 	subs.w	r9, r9, #1
 8007134:	d505      	bpl.n	8007142 <_fwalk_sglue+0x22>
 8007136:	6824      	ldr	r4, [r4, #0]
 8007138:	2c00      	cmp	r4, #0
 800713a:	d1f7      	bne.n	800712c <_fwalk_sglue+0xc>
 800713c:	4630      	mov	r0, r6
 800713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007142:	89ab      	ldrh	r3, [r5, #12]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d907      	bls.n	8007158 <_fwalk_sglue+0x38>
 8007148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800714c:	3301      	adds	r3, #1
 800714e:	d003      	beq.n	8007158 <_fwalk_sglue+0x38>
 8007150:	4629      	mov	r1, r5
 8007152:	4638      	mov	r0, r7
 8007154:	47c0      	blx	r8
 8007156:	4306      	orrs	r6, r0
 8007158:	3568      	adds	r5, #104	@ 0x68
 800715a:	e7e9      	b.n	8007130 <_fwalk_sglue+0x10>

0800715c <_puts_r>:
 800715c:	6a03      	ldr	r3, [r0, #32]
 800715e:	b570      	push	{r4, r5, r6, lr}
 8007160:	6884      	ldr	r4, [r0, #8]
 8007162:	4605      	mov	r5, r0
 8007164:	460e      	mov	r6, r1
 8007166:	b90b      	cbnz	r3, 800716c <_puts_r+0x10>
 8007168:	f7ff ffc2 	bl	80070f0 <__sinit>
 800716c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800716e:	07db      	lsls	r3, r3, #31
 8007170:	d405      	bmi.n	800717e <_puts_r+0x22>
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	0598      	lsls	r0, r3, #22
 8007176:	d402      	bmi.n	800717e <_puts_r+0x22>
 8007178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800717a:	f000 f99e 	bl	80074ba <__retarget_lock_acquire_recursive>
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	0719      	lsls	r1, r3, #28
 8007182:	d502      	bpl.n	800718a <_puts_r+0x2e>
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d135      	bne.n	80071f6 <_puts_r+0x9a>
 800718a:	4621      	mov	r1, r4
 800718c:	4628      	mov	r0, r5
 800718e:	f000 f8c5 	bl	800731c <__swsetup_r>
 8007192:	b380      	cbz	r0, 80071f6 <_puts_r+0x9a>
 8007194:	f04f 35ff 	mov.w	r5, #4294967295
 8007198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800719a:	07da      	lsls	r2, r3, #31
 800719c:	d405      	bmi.n	80071aa <_puts_r+0x4e>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	059b      	lsls	r3, r3, #22
 80071a2:	d402      	bmi.n	80071aa <_puts_r+0x4e>
 80071a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071a6:	f000 f989 	bl	80074bc <__retarget_lock_release_recursive>
 80071aa:	4628      	mov	r0, r5
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da04      	bge.n	80071bc <_puts_r+0x60>
 80071b2:	69a2      	ldr	r2, [r4, #24]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	dc17      	bgt.n	80071e8 <_puts_r+0x8c>
 80071b8:	290a      	cmp	r1, #10
 80071ba:	d015      	beq.n	80071e8 <_puts_r+0x8c>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	6022      	str	r2, [r4, #0]
 80071c2:	7019      	strb	r1, [r3, #0]
 80071c4:	68a3      	ldr	r3, [r4, #8]
 80071c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071ca:	3b01      	subs	r3, #1
 80071cc:	60a3      	str	r3, [r4, #8]
 80071ce:	2900      	cmp	r1, #0
 80071d0:	d1ed      	bne.n	80071ae <_puts_r+0x52>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	da11      	bge.n	80071fa <_puts_r+0x9e>
 80071d6:	4622      	mov	r2, r4
 80071d8:	210a      	movs	r1, #10
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 f85f 	bl	800729e <__swbuf_r>
 80071e0:	3001      	adds	r0, #1
 80071e2:	d0d7      	beq.n	8007194 <_puts_r+0x38>
 80071e4:	250a      	movs	r5, #10
 80071e6:	e7d7      	b.n	8007198 <_puts_r+0x3c>
 80071e8:	4622      	mov	r2, r4
 80071ea:	4628      	mov	r0, r5
 80071ec:	f000 f857 	bl	800729e <__swbuf_r>
 80071f0:	3001      	adds	r0, #1
 80071f2:	d1e7      	bne.n	80071c4 <_puts_r+0x68>
 80071f4:	e7ce      	b.n	8007194 <_puts_r+0x38>
 80071f6:	3e01      	subs	r6, #1
 80071f8:	e7e4      	b.n	80071c4 <_puts_r+0x68>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	6022      	str	r2, [r4, #0]
 8007200:	220a      	movs	r2, #10
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	e7ee      	b.n	80071e4 <_puts_r+0x88>
	...

08007208 <puts>:
 8007208:	4b02      	ldr	r3, [pc, #8]	@ (8007214 <puts+0xc>)
 800720a:	4601      	mov	r1, r0
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	f7ff bfa5 	b.w	800715c <_puts_r>
 8007212:	bf00      	nop
 8007214:	20000018 	.word	0x20000018

08007218 <__sread>:
 8007218:	b510      	push	{r4, lr}
 800721a:	460c      	mov	r4, r1
 800721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007220:	f000 f8fc 	bl	800741c <_read_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	bfab      	itete	ge
 8007228:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800722a:	89a3      	ldrhlt	r3, [r4, #12]
 800722c:	181b      	addge	r3, r3, r0
 800722e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007232:	bfac      	ite	ge
 8007234:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007236:	81a3      	strhlt	r3, [r4, #12]
 8007238:	bd10      	pop	{r4, pc}

0800723a <__swrite>:
 800723a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	461f      	mov	r7, r3
 8007240:	898b      	ldrh	r3, [r1, #12]
 8007242:	05db      	lsls	r3, r3, #23
 8007244:	4605      	mov	r5, r0
 8007246:	460c      	mov	r4, r1
 8007248:	4616      	mov	r6, r2
 800724a:	d505      	bpl.n	8007258 <__swrite+0x1e>
 800724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007250:	2302      	movs	r3, #2
 8007252:	2200      	movs	r2, #0
 8007254:	f000 f8d0 	bl	80073f8 <_lseek_r>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800725e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	4628      	mov	r0, r5
 800726a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	f000 b8e7 	b.w	8007440 <_write_r>

08007272 <__sseek>:
 8007272:	b510      	push	{r4, lr}
 8007274:	460c      	mov	r4, r1
 8007276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727a:	f000 f8bd 	bl	80073f8 <_lseek_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	bf15      	itete	ne
 8007284:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007286:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800728a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800728e:	81a3      	strheq	r3, [r4, #12]
 8007290:	bf18      	it	ne
 8007292:	81a3      	strhne	r3, [r4, #12]
 8007294:	bd10      	pop	{r4, pc}

08007296 <__sclose>:
 8007296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729a:	f000 b89d 	b.w	80073d8 <_close_r>

0800729e <__swbuf_r>:
 800729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a0:	460e      	mov	r6, r1
 80072a2:	4614      	mov	r4, r2
 80072a4:	4605      	mov	r5, r0
 80072a6:	b118      	cbz	r0, 80072b0 <__swbuf_r+0x12>
 80072a8:	6a03      	ldr	r3, [r0, #32]
 80072aa:	b90b      	cbnz	r3, 80072b0 <__swbuf_r+0x12>
 80072ac:	f7ff ff20 	bl	80070f0 <__sinit>
 80072b0:	69a3      	ldr	r3, [r4, #24]
 80072b2:	60a3      	str	r3, [r4, #8]
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	071a      	lsls	r2, r3, #28
 80072b8:	d501      	bpl.n	80072be <__swbuf_r+0x20>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	b943      	cbnz	r3, 80072d0 <__swbuf_r+0x32>
 80072be:	4621      	mov	r1, r4
 80072c0:	4628      	mov	r0, r5
 80072c2:	f000 f82b 	bl	800731c <__swsetup_r>
 80072c6:	b118      	cbz	r0, 80072d0 <__swbuf_r+0x32>
 80072c8:	f04f 37ff 	mov.w	r7, #4294967295
 80072cc:	4638      	mov	r0, r7
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	6922      	ldr	r2, [r4, #16]
 80072d4:	1a98      	subs	r0, r3, r2
 80072d6:	6963      	ldr	r3, [r4, #20]
 80072d8:	b2f6      	uxtb	r6, r6
 80072da:	4283      	cmp	r3, r0
 80072dc:	4637      	mov	r7, r6
 80072de:	dc05      	bgt.n	80072ec <__swbuf_r+0x4e>
 80072e0:	4621      	mov	r1, r4
 80072e2:	4628      	mov	r0, r5
 80072e4:	f000 fa76 	bl	80077d4 <_fflush_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d1ed      	bne.n	80072c8 <__swbuf_r+0x2a>
 80072ec:	68a3      	ldr	r3, [r4, #8]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	60a3      	str	r3, [r4, #8]
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	6022      	str	r2, [r4, #0]
 80072f8:	701e      	strb	r6, [r3, #0]
 80072fa:	6962      	ldr	r2, [r4, #20]
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	429a      	cmp	r2, r3
 8007300:	d004      	beq.n	800730c <__swbuf_r+0x6e>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	07db      	lsls	r3, r3, #31
 8007306:	d5e1      	bpl.n	80072cc <__swbuf_r+0x2e>
 8007308:	2e0a      	cmp	r6, #10
 800730a:	d1df      	bne.n	80072cc <__swbuf_r+0x2e>
 800730c:	4621      	mov	r1, r4
 800730e:	4628      	mov	r0, r5
 8007310:	f000 fa60 	bl	80077d4 <_fflush_r>
 8007314:	2800      	cmp	r0, #0
 8007316:	d0d9      	beq.n	80072cc <__swbuf_r+0x2e>
 8007318:	e7d6      	b.n	80072c8 <__swbuf_r+0x2a>
	...

0800731c <__swsetup_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4b29      	ldr	r3, [pc, #164]	@ (80073c4 <__swsetup_r+0xa8>)
 8007320:	4605      	mov	r5, r0
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	460c      	mov	r4, r1
 8007326:	b118      	cbz	r0, 8007330 <__swsetup_r+0x14>
 8007328:	6a03      	ldr	r3, [r0, #32]
 800732a:	b90b      	cbnz	r3, 8007330 <__swsetup_r+0x14>
 800732c:	f7ff fee0 	bl	80070f0 <__sinit>
 8007330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007334:	0719      	lsls	r1, r3, #28
 8007336:	d422      	bmi.n	800737e <__swsetup_r+0x62>
 8007338:	06da      	lsls	r2, r3, #27
 800733a:	d407      	bmi.n	800734c <__swsetup_r+0x30>
 800733c:	2209      	movs	r2, #9
 800733e:	602a      	str	r2, [r5, #0]
 8007340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	f04f 30ff 	mov.w	r0, #4294967295
 800734a:	e033      	b.n	80073b4 <__swsetup_r+0x98>
 800734c:	0758      	lsls	r0, r3, #29
 800734e:	d512      	bpl.n	8007376 <__swsetup_r+0x5a>
 8007350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007352:	b141      	cbz	r1, 8007366 <__swsetup_r+0x4a>
 8007354:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007358:	4299      	cmp	r1, r3
 800735a:	d002      	beq.n	8007362 <__swsetup_r+0x46>
 800735c:	4628      	mov	r0, r5
 800735e:	f000 f8bd 	bl	80074dc <_free_r>
 8007362:	2300      	movs	r3, #0
 8007364:	6363      	str	r3, [r4, #52]	@ 0x34
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800736c:	81a3      	strh	r3, [r4, #12]
 800736e:	2300      	movs	r3, #0
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f043 0308 	orr.w	r3, r3, #8
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	b94b      	cbnz	r3, 8007396 <__swsetup_r+0x7a>
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800738c:	d003      	beq.n	8007396 <__swsetup_r+0x7a>
 800738e:	4621      	mov	r1, r4
 8007390:	4628      	mov	r0, r5
 8007392:	f000 fa6d 	bl	8007870 <__smakebuf_r>
 8007396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800739a:	f013 0201 	ands.w	r2, r3, #1
 800739e:	d00a      	beq.n	80073b6 <__swsetup_r+0x9a>
 80073a0:	2200      	movs	r2, #0
 80073a2:	60a2      	str	r2, [r4, #8]
 80073a4:	6962      	ldr	r2, [r4, #20]
 80073a6:	4252      	negs	r2, r2
 80073a8:	61a2      	str	r2, [r4, #24]
 80073aa:	6922      	ldr	r2, [r4, #16]
 80073ac:	b942      	cbnz	r2, 80073c0 <__swsetup_r+0xa4>
 80073ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073b2:	d1c5      	bne.n	8007340 <__swsetup_r+0x24>
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	0799      	lsls	r1, r3, #30
 80073b8:	bf58      	it	pl
 80073ba:	6962      	ldrpl	r2, [r4, #20]
 80073bc:	60a2      	str	r2, [r4, #8]
 80073be:	e7f4      	b.n	80073aa <__swsetup_r+0x8e>
 80073c0:	2000      	movs	r0, #0
 80073c2:	e7f7      	b.n	80073b4 <__swsetup_r+0x98>
 80073c4:	20000018 	.word	0x20000018

080073c8 <memset>:
 80073c8:	4402      	add	r2, r0
 80073ca:	4603      	mov	r3, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <_close_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4d06      	ldr	r5, [pc, #24]	@ (80073f4 <_close_r+0x1c>)
 80073dc:	2300      	movs	r3, #0
 80073de:	4604      	mov	r4, r0
 80073e0:	4608      	mov	r0, r1
 80073e2:	602b      	str	r3, [r5, #0]
 80073e4:	f7f9 fb74 	bl	8000ad0 <_close>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d102      	bne.n	80073f2 <_close_r+0x1a>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	b103      	cbz	r3, 80073f2 <_close_r+0x1a>
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	20001bb4 	.word	0x20001bb4

080073f8 <_lseek_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4d07      	ldr	r5, [pc, #28]	@ (8007418 <_lseek_r+0x20>)
 80073fc:	4604      	mov	r4, r0
 80073fe:	4608      	mov	r0, r1
 8007400:	4611      	mov	r1, r2
 8007402:	2200      	movs	r2, #0
 8007404:	602a      	str	r2, [r5, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	f7f9 fb89 	bl	8000b1e <_lseek>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_lseek_r+0x1e>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_lseek_r+0x1e>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	20001bb4 	.word	0x20001bb4

0800741c <_read_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	4d07      	ldr	r5, [pc, #28]	@ (800743c <_read_r+0x20>)
 8007420:	4604      	mov	r4, r0
 8007422:	4608      	mov	r0, r1
 8007424:	4611      	mov	r1, r2
 8007426:	2200      	movs	r2, #0
 8007428:	602a      	str	r2, [r5, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	f7f9 fb33 	bl	8000a96 <_read>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	d102      	bne.n	800743a <_read_r+0x1e>
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	b103      	cbz	r3, 800743a <_read_r+0x1e>
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	20001bb4 	.word	0x20001bb4

08007440 <_write_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d07      	ldr	r5, [pc, #28]	@ (8007460 <_write_r+0x20>)
 8007444:	4604      	mov	r4, r0
 8007446:	4608      	mov	r0, r1
 8007448:	4611      	mov	r1, r2
 800744a:	2200      	movs	r2, #0
 800744c:	602a      	str	r2, [r5, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	f7f9 faf7 	bl	8000a42 <_write>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d102      	bne.n	800745e <_write_r+0x1e>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	b103      	cbz	r3, 800745e <_write_r+0x1e>
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	20001bb4 	.word	0x20001bb4

08007464 <__errno>:
 8007464:	4b01      	ldr	r3, [pc, #4]	@ (800746c <__errno+0x8>)
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	20000018 	.word	0x20000018

08007470 <__libc_init_array>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	4d0d      	ldr	r5, [pc, #52]	@ (80074a8 <__libc_init_array+0x38>)
 8007474:	4c0d      	ldr	r4, [pc, #52]	@ (80074ac <__libc_init_array+0x3c>)
 8007476:	1b64      	subs	r4, r4, r5
 8007478:	10a4      	asrs	r4, r4, #2
 800747a:	2600      	movs	r6, #0
 800747c:	42a6      	cmp	r6, r4
 800747e:	d109      	bne.n	8007494 <__libc_init_array+0x24>
 8007480:	4d0b      	ldr	r5, [pc, #44]	@ (80074b0 <__libc_init_array+0x40>)
 8007482:	4c0c      	ldr	r4, [pc, #48]	@ (80074b4 <__libc_init_array+0x44>)
 8007484:	f000 fa62 	bl	800794c <_init>
 8007488:	1b64      	subs	r4, r4, r5
 800748a:	10a4      	asrs	r4, r4, #2
 800748c:	2600      	movs	r6, #0
 800748e:	42a6      	cmp	r6, r4
 8007490:	d105      	bne.n	800749e <__libc_init_array+0x2e>
 8007492:	bd70      	pop	{r4, r5, r6, pc}
 8007494:	f855 3b04 	ldr.w	r3, [r5], #4
 8007498:	4798      	blx	r3
 800749a:	3601      	adds	r6, #1
 800749c:	e7ee      	b.n	800747c <__libc_init_array+0xc>
 800749e:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a2:	4798      	blx	r3
 80074a4:	3601      	adds	r6, #1
 80074a6:	e7f2      	b.n	800748e <__libc_init_array+0x1e>
 80074a8:	08007a68 	.word	0x08007a68
 80074ac:	08007a68 	.word	0x08007a68
 80074b0:	08007a68 	.word	0x08007a68
 80074b4:	08007a6c 	.word	0x08007a6c

080074b8 <__retarget_lock_init_recursive>:
 80074b8:	4770      	bx	lr

080074ba <__retarget_lock_acquire_recursive>:
 80074ba:	4770      	bx	lr

080074bc <__retarget_lock_release_recursive>:
 80074bc:	4770      	bx	lr

080074be <memcpy>:
 80074be:	440a      	add	r2, r1
 80074c0:	4291      	cmp	r1, r2
 80074c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80074c6:	d100      	bne.n	80074ca <memcpy+0xc>
 80074c8:	4770      	bx	lr
 80074ca:	b510      	push	{r4, lr}
 80074cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d4:	4291      	cmp	r1, r2
 80074d6:	d1f9      	bne.n	80074cc <memcpy+0xe>
 80074d8:	bd10      	pop	{r4, pc}
	...

080074dc <_free_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4605      	mov	r5, r0
 80074e0:	2900      	cmp	r1, #0
 80074e2:	d041      	beq.n	8007568 <_free_r+0x8c>
 80074e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074e8:	1f0c      	subs	r4, r1, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bfb8      	it	lt
 80074ee:	18e4      	addlt	r4, r4, r3
 80074f0:	f000 f8e0 	bl	80076b4 <__malloc_lock>
 80074f4:	4a1d      	ldr	r2, [pc, #116]	@ (800756c <_free_r+0x90>)
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	b933      	cbnz	r3, 8007508 <_free_r+0x2c>
 80074fa:	6063      	str	r3, [r4, #4]
 80074fc:	6014      	str	r4, [r2, #0]
 80074fe:	4628      	mov	r0, r5
 8007500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007504:	f000 b8dc 	b.w	80076c0 <__malloc_unlock>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d908      	bls.n	800751e <_free_r+0x42>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	1821      	adds	r1, r4, r0
 8007510:	428b      	cmp	r3, r1
 8007512:	bf01      	itttt	eq
 8007514:	6819      	ldreq	r1, [r3, #0]
 8007516:	685b      	ldreq	r3, [r3, #4]
 8007518:	1809      	addeq	r1, r1, r0
 800751a:	6021      	streq	r1, [r4, #0]
 800751c:	e7ed      	b.n	80074fa <_free_r+0x1e>
 800751e:	461a      	mov	r2, r3
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	b10b      	cbz	r3, 8007528 <_free_r+0x4c>
 8007524:	42a3      	cmp	r3, r4
 8007526:	d9fa      	bls.n	800751e <_free_r+0x42>
 8007528:	6811      	ldr	r1, [r2, #0]
 800752a:	1850      	adds	r0, r2, r1
 800752c:	42a0      	cmp	r0, r4
 800752e:	d10b      	bne.n	8007548 <_free_r+0x6c>
 8007530:	6820      	ldr	r0, [r4, #0]
 8007532:	4401      	add	r1, r0
 8007534:	1850      	adds	r0, r2, r1
 8007536:	4283      	cmp	r3, r0
 8007538:	6011      	str	r1, [r2, #0]
 800753a:	d1e0      	bne.n	80074fe <_free_r+0x22>
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	6053      	str	r3, [r2, #4]
 8007542:	4408      	add	r0, r1
 8007544:	6010      	str	r0, [r2, #0]
 8007546:	e7da      	b.n	80074fe <_free_r+0x22>
 8007548:	d902      	bls.n	8007550 <_free_r+0x74>
 800754a:	230c      	movs	r3, #12
 800754c:	602b      	str	r3, [r5, #0]
 800754e:	e7d6      	b.n	80074fe <_free_r+0x22>
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	1821      	adds	r1, r4, r0
 8007554:	428b      	cmp	r3, r1
 8007556:	bf04      	itt	eq
 8007558:	6819      	ldreq	r1, [r3, #0]
 800755a:	685b      	ldreq	r3, [r3, #4]
 800755c:	6063      	str	r3, [r4, #4]
 800755e:	bf04      	itt	eq
 8007560:	1809      	addeq	r1, r1, r0
 8007562:	6021      	streq	r1, [r4, #0]
 8007564:	6054      	str	r4, [r2, #4]
 8007566:	e7ca      	b.n	80074fe <_free_r+0x22>
 8007568:	bd38      	pop	{r3, r4, r5, pc}
 800756a:	bf00      	nop
 800756c:	20001bc0 	.word	0x20001bc0

08007570 <sbrk_aligned>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4e0f      	ldr	r6, [pc, #60]	@ (80075b0 <sbrk_aligned+0x40>)
 8007574:	460c      	mov	r4, r1
 8007576:	6831      	ldr	r1, [r6, #0]
 8007578:	4605      	mov	r5, r0
 800757a:	b911      	cbnz	r1, 8007582 <sbrk_aligned+0x12>
 800757c:	f000 f9d6 	bl	800792c <_sbrk_r>
 8007580:	6030      	str	r0, [r6, #0]
 8007582:	4621      	mov	r1, r4
 8007584:	4628      	mov	r0, r5
 8007586:	f000 f9d1 	bl	800792c <_sbrk_r>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d103      	bne.n	8007596 <sbrk_aligned+0x26>
 800758e:	f04f 34ff 	mov.w	r4, #4294967295
 8007592:	4620      	mov	r0, r4
 8007594:	bd70      	pop	{r4, r5, r6, pc}
 8007596:	1cc4      	adds	r4, r0, #3
 8007598:	f024 0403 	bic.w	r4, r4, #3
 800759c:	42a0      	cmp	r0, r4
 800759e:	d0f8      	beq.n	8007592 <sbrk_aligned+0x22>
 80075a0:	1a21      	subs	r1, r4, r0
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 f9c2 	bl	800792c <_sbrk_r>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d1f2      	bne.n	8007592 <sbrk_aligned+0x22>
 80075ac:	e7ef      	b.n	800758e <sbrk_aligned+0x1e>
 80075ae:	bf00      	nop
 80075b0:	20001bbc 	.word	0x20001bbc

080075b4 <_malloc_r>:
 80075b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b8:	1ccd      	adds	r5, r1, #3
 80075ba:	f025 0503 	bic.w	r5, r5, #3
 80075be:	3508      	adds	r5, #8
 80075c0:	2d0c      	cmp	r5, #12
 80075c2:	bf38      	it	cc
 80075c4:	250c      	movcc	r5, #12
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	4606      	mov	r6, r0
 80075ca:	db01      	blt.n	80075d0 <_malloc_r+0x1c>
 80075cc:	42a9      	cmp	r1, r5
 80075ce:	d904      	bls.n	80075da <_malloc_r+0x26>
 80075d0:	230c      	movs	r3, #12
 80075d2:	6033      	str	r3, [r6, #0]
 80075d4:	2000      	movs	r0, #0
 80075d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076b0 <_malloc_r+0xfc>
 80075de:	f000 f869 	bl	80076b4 <__malloc_lock>
 80075e2:	f8d8 3000 	ldr.w	r3, [r8]
 80075e6:	461c      	mov	r4, r3
 80075e8:	bb44      	cbnz	r4, 800763c <_malloc_r+0x88>
 80075ea:	4629      	mov	r1, r5
 80075ec:	4630      	mov	r0, r6
 80075ee:	f7ff ffbf 	bl	8007570 <sbrk_aligned>
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	4604      	mov	r4, r0
 80075f6:	d158      	bne.n	80076aa <_malloc_r+0xf6>
 80075f8:	f8d8 4000 	ldr.w	r4, [r8]
 80075fc:	4627      	mov	r7, r4
 80075fe:	2f00      	cmp	r7, #0
 8007600:	d143      	bne.n	800768a <_malloc_r+0xd6>
 8007602:	2c00      	cmp	r4, #0
 8007604:	d04b      	beq.n	800769e <_malloc_r+0xea>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	4639      	mov	r1, r7
 800760a:	4630      	mov	r0, r6
 800760c:	eb04 0903 	add.w	r9, r4, r3
 8007610:	f000 f98c 	bl	800792c <_sbrk_r>
 8007614:	4581      	cmp	r9, r0
 8007616:	d142      	bne.n	800769e <_malloc_r+0xea>
 8007618:	6821      	ldr	r1, [r4, #0]
 800761a:	1a6d      	subs	r5, r5, r1
 800761c:	4629      	mov	r1, r5
 800761e:	4630      	mov	r0, r6
 8007620:	f7ff ffa6 	bl	8007570 <sbrk_aligned>
 8007624:	3001      	adds	r0, #1
 8007626:	d03a      	beq.n	800769e <_malloc_r+0xea>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	442b      	add	r3, r5
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	f8d8 3000 	ldr.w	r3, [r8]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	bb62      	cbnz	r2, 8007690 <_malloc_r+0xdc>
 8007636:	f8c8 7000 	str.w	r7, [r8]
 800763a:	e00f      	b.n	800765c <_malloc_r+0xa8>
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	1b52      	subs	r2, r2, r5
 8007640:	d420      	bmi.n	8007684 <_malloc_r+0xd0>
 8007642:	2a0b      	cmp	r2, #11
 8007644:	d917      	bls.n	8007676 <_malloc_r+0xc2>
 8007646:	1961      	adds	r1, r4, r5
 8007648:	42a3      	cmp	r3, r4
 800764a:	6025      	str	r5, [r4, #0]
 800764c:	bf18      	it	ne
 800764e:	6059      	strne	r1, [r3, #4]
 8007650:	6863      	ldr	r3, [r4, #4]
 8007652:	bf08      	it	eq
 8007654:	f8c8 1000 	streq.w	r1, [r8]
 8007658:	5162      	str	r2, [r4, r5]
 800765a:	604b      	str	r3, [r1, #4]
 800765c:	4630      	mov	r0, r6
 800765e:	f000 f82f 	bl	80076c0 <__malloc_unlock>
 8007662:	f104 000b 	add.w	r0, r4, #11
 8007666:	1d23      	adds	r3, r4, #4
 8007668:	f020 0007 	bic.w	r0, r0, #7
 800766c:	1ac2      	subs	r2, r0, r3
 800766e:	bf1c      	itt	ne
 8007670:	1a1b      	subne	r3, r3, r0
 8007672:	50a3      	strne	r3, [r4, r2]
 8007674:	e7af      	b.n	80075d6 <_malloc_r+0x22>
 8007676:	6862      	ldr	r2, [r4, #4]
 8007678:	42a3      	cmp	r3, r4
 800767a:	bf0c      	ite	eq
 800767c:	f8c8 2000 	streq.w	r2, [r8]
 8007680:	605a      	strne	r2, [r3, #4]
 8007682:	e7eb      	b.n	800765c <_malloc_r+0xa8>
 8007684:	4623      	mov	r3, r4
 8007686:	6864      	ldr	r4, [r4, #4]
 8007688:	e7ae      	b.n	80075e8 <_malloc_r+0x34>
 800768a:	463c      	mov	r4, r7
 800768c:	687f      	ldr	r7, [r7, #4]
 800768e:	e7b6      	b.n	80075fe <_malloc_r+0x4a>
 8007690:	461a      	mov	r2, r3
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	42a3      	cmp	r3, r4
 8007696:	d1fb      	bne.n	8007690 <_malloc_r+0xdc>
 8007698:	2300      	movs	r3, #0
 800769a:	6053      	str	r3, [r2, #4]
 800769c:	e7de      	b.n	800765c <_malloc_r+0xa8>
 800769e:	230c      	movs	r3, #12
 80076a0:	6033      	str	r3, [r6, #0]
 80076a2:	4630      	mov	r0, r6
 80076a4:	f000 f80c 	bl	80076c0 <__malloc_unlock>
 80076a8:	e794      	b.n	80075d4 <_malloc_r+0x20>
 80076aa:	6005      	str	r5, [r0, #0]
 80076ac:	e7d6      	b.n	800765c <_malloc_r+0xa8>
 80076ae:	bf00      	nop
 80076b0:	20001bc0 	.word	0x20001bc0

080076b4 <__malloc_lock>:
 80076b4:	4801      	ldr	r0, [pc, #4]	@ (80076bc <__malloc_lock+0x8>)
 80076b6:	f7ff bf00 	b.w	80074ba <__retarget_lock_acquire_recursive>
 80076ba:	bf00      	nop
 80076bc:	20001bb8 	.word	0x20001bb8

080076c0 <__malloc_unlock>:
 80076c0:	4801      	ldr	r0, [pc, #4]	@ (80076c8 <__malloc_unlock+0x8>)
 80076c2:	f7ff befb 	b.w	80074bc <__retarget_lock_release_recursive>
 80076c6:	bf00      	nop
 80076c8:	20001bb8 	.word	0x20001bb8

080076cc <__sflush_r>:
 80076cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d4:	0716      	lsls	r6, r2, #28
 80076d6:	4605      	mov	r5, r0
 80076d8:	460c      	mov	r4, r1
 80076da:	d454      	bmi.n	8007786 <__sflush_r+0xba>
 80076dc:	684b      	ldr	r3, [r1, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dc02      	bgt.n	80076e8 <__sflush_r+0x1c>
 80076e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dd48      	ble.n	800777a <__sflush_r+0xae>
 80076e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	d045      	beq.n	800777a <__sflush_r+0xae>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076f4:	682f      	ldr	r7, [r5, #0]
 80076f6:	6a21      	ldr	r1, [r4, #32]
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	d030      	beq.n	800775e <__sflush_r+0x92>
 80076fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	0759      	lsls	r1, r3, #29
 8007702:	d505      	bpl.n	8007710 <__sflush_r+0x44>
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	1ad2      	subs	r2, r2, r3
 8007708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800770a:	b10b      	cbz	r3, 8007710 <__sflush_r+0x44>
 800770c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	2300      	movs	r3, #0
 8007712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007714:	6a21      	ldr	r1, [r4, #32]
 8007716:	4628      	mov	r0, r5
 8007718:	47b0      	blx	r6
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	d106      	bne.n	800772e <__sflush_r+0x62>
 8007720:	6829      	ldr	r1, [r5, #0]
 8007722:	291d      	cmp	r1, #29
 8007724:	d82b      	bhi.n	800777e <__sflush_r+0xb2>
 8007726:	4a2a      	ldr	r2, [pc, #168]	@ (80077d0 <__sflush_r+0x104>)
 8007728:	410a      	asrs	r2, r1
 800772a:	07d6      	lsls	r6, r2, #31
 800772c:	d427      	bmi.n	800777e <__sflush_r+0xb2>
 800772e:	2200      	movs	r2, #0
 8007730:	6062      	str	r2, [r4, #4]
 8007732:	04d9      	lsls	r1, r3, #19
 8007734:	6922      	ldr	r2, [r4, #16]
 8007736:	6022      	str	r2, [r4, #0]
 8007738:	d504      	bpl.n	8007744 <__sflush_r+0x78>
 800773a:	1c42      	adds	r2, r0, #1
 800773c:	d101      	bne.n	8007742 <__sflush_r+0x76>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	b903      	cbnz	r3, 8007744 <__sflush_r+0x78>
 8007742:	6560      	str	r0, [r4, #84]	@ 0x54
 8007744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007746:	602f      	str	r7, [r5, #0]
 8007748:	b1b9      	cbz	r1, 800777a <__sflush_r+0xae>
 800774a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800774e:	4299      	cmp	r1, r3
 8007750:	d002      	beq.n	8007758 <__sflush_r+0x8c>
 8007752:	4628      	mov	r0, r5
 8007754:	f7ff fec2 	bl	80074dc <_free_r>
 8007758:	2300      	movs	r3, #0
 800775a:	6363      	str	r3, [r4, #52]	@ 0x34
 800775c:	e00d      	b.n	800777a <__sflush_r+0xae>
 800775e:	2301      	movs	r3, #1
 8007760:	4628      	mov	r0, r5
 8007762:	47b0      	blx	r6
 8007764:	4602      	mov	r2, r0
 8007766:	1c50      	adds	r0, r2, #1
 8007768:	d1c9      	bne.n	80076fe <__sflush_r+0x32>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0c6      	beq.n	80076fe <__sflush_r+0x32>
 8007770:	2b1d      	cmp	r3, #29
 8007772:	d001      	beq.n	8007778 <__sflush_r+0xac>
 8007774:	2b16      	cmp	r3, #22
 8007776:	d11e      	bne.n	80077b6 <__sflush_r+0xea>
 8007778:	602f      	str	r7, [r5, #0]
 800777a:	2000      	movs	r0, #0
 800777c:	e022      	b.n	80077c4 <__sflush_r+0xf8>
 800777e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007782:	b21b      	sxth	r3, r3
 8007784:	e01b      	b.n	80077be <__sflush_r+0xf2>
 8007786:	690f      	ldr	r7, [r1, #16]
 8007788:	2f00      	cmp	r7, #0
 800778a:	d0f6      	beq.n	800777a <__sflush_r+0xae>
 800778c:	0793      	lsls	r3, r2, #30
 800778e:	680e      	ldr	r6, [r1, #0]
 8007790:	bf08      	it	eq
 8007792:	694b      	ldreq	r3, [r1, #20]
 8007794:	600f      	str	r7, [r1, #0]
 8007796:	bf18      	it	ne
 8007798:	2300      	movne	r3, #0
 800779a:	eba6 0807 	sub.w	r8, r6, r7
 800779e:	608b      	str	r3, [r1, #8]
 80077a0:	f1b8 0f00 	cmp.w	r8, #0
 80077a4:	dde9      	ble.n	800777a <__sflush_r+0xae>
 80077a6:	6a21      	ldr	r1, [r4, #32]
 80077a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077aa:	4643      	mov	r3, r8
 80077ac:	463a      	mov	r2, r7
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b0      	blx	r6
 80077b2:	2800      	cmp	r0, #0
 80077b4:	dc08      	bgt.n	80077c8 <__sflush_r+0xfc>
 80077b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	4407      	add	r7, r0
 80077ca:	eba8 0800 	sub.w	r8, r8, r0
 80077ce:	e7e7      	b.n	80077a0 <__sflush_r+0xd4>
 80077d0:	dfbffffe 	.word	0xdfbffffe

080077d4 <_fflush_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	690b      	ldr	r3, [r1, #16]
 80077d8:	4605      	mov	r5, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	b913      	cbnz	r3, 80077e4 <_fflush_r+0x10>
 80077de:	2500      	movs	r5, #0
 80077e0:	4628      	mov	r0, r5
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	b118      	cbz	r0, 80077ee <_fflush_r+0x1a>
 80077e6:	6a03      	ldr	r3, [r0, #32]
 80077e8:	b90b      	cbnz	r3, 80077ee <_fflush_r+0x1a>
 80077ea:	f7ff fc81 	bl	80070f0 <__sinit>
 80077ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0f3      	beq.n	80077de <_fflush_r+0xa>
 80077f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077f8:	07d0      	lsls	r0, r2, #31
 80077fa:	d404      	bmi.n	8007806 <_fflush_r+0x32>
 80077fc:	0599      	lsls	r1, r3, #22
 80077fe:	d402      	bmi.n	8007806 <_fflush_r+0x32>
 8007800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007802:	f7ff fe5a 	bl	80074ba <__retarget_lock_acquire_recursive>
 8007806:	4628      	mov	r0, r5
 8007808:	4621      	mov	r1, r4
 800780a:	f7ff ff5f 	bl	80076cc <__sflush_r>
 800780e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007810:	07da      	lsls	r2, r3, #31
 8007812:	4605      	mov	r5, r0
 8007814:	d4e4      	bmi.n	80077e0 <_fflush_r+0xc>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	059b      	lsls	r3, r3, #22
 800781a:	d4e1      	bmi.n	80077e0 <_fflush_r+0xc>
 800781c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800781e:	f7ff fe4d 	bl	80074bc <__retarget_lock_release_recursive>
 8007822:	e7dd      	b.n	80077e0 <_fflush_r+0xc>

08007824 <__swhatbuf_r>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	460c      	mov	r4, r1
 8007828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782c:	2900      	cmp	r1, #0
 800782e:	b096      	sub	sp, #88	@ 0x58
 8007830:	4615      	mov	r5, r2
 8007832:	461e      	mov	r6, r3
 8007834:	da0d      	bge.n	8007852 <__swhatbuf_r+0x2e>
 8007836:	89a3      	ldrh	r3, [r4, #12]
 8007838:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800783c:	f04f 0100 	mov.w	r1, #0
 8007840:	bf14      	ite	ne
 8007842:	2340      	movne	r3, #64	@ 0x40
 8007844:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007848:	2000      	movs	r0, #0
 800784a:	6031      	str	r1, [r6, #0]
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	b016      	add	sp, #88	@ 0x58
 8007850:	bd70      	pop	{r4, r5, r6, pc}
 8007852:	466a      	mov	r2, sp
 8007854:	f000 f848 	bl	80078e8 <_fstat_r>
 8007858:	2800      	cmp	r0, #0
 800785a:	dbec      	blt.n	8007836 <__swhatbuf_r+0x12>
 800785c:	9901      	ldr	r1, [sp, #4]
 800785e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007862:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007866:	4259      	negs	r1, r3
 8007868:	4159      	adcs	r1, r3
 800786a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800786e:	e7eb      	b.n	8007848 <__swhatbuf_r+0x24>

08007870 <__smakebuf_r>:
 8007870:	898b      	ldrh	r3, [r1, #12]
 8007872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007874:	079d      	lsls	r5, r3, #30
 8007876:	4606      	mov	r6, r0
 8007878:	460c      	mov	r4, r1
 800787a:	d507      	bpl.n	800788c <__smakebuf_r+0x1c>
 800787c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	6123      	str	r3, [r4, #16]
 8007884:	2301      	movs	r3, #1
 8007886:	6163      	str	r3, [r4, #20]
 8007888:	b003      	add	sp, #12
 800788a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800788c:	ab01      	add	r3, sp, #4
 800788e:	466a      	mov	r2, sp
 8007890:	f7ff ffc8 	bl	8007824 <__swhatbuf_r>
 8007894:	9f00      	ldr	r7, [sp, #0]
 8007896:	4605      	mov	r5, r0
 8007898:	4639      	mov	r1, r7
 800789a:	4630      	mov	r0, r6
 800789c:	f7ff fe8a 	bl	80075b4 <_malloc_r>
 80078a0:	b948      	cbnz	r0, 80078b6 <__smakebuf_r+0x46>
 80078a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a6:	059a      	lsls	r2, r3, #22
 80078a8:	d4ee      	bmi.n	8007888 <__smakebuf_r+0x18>
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	f043 0302 	orr.w	r3, r3, #2
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	e7e2      	b.n	800787c <__smakebuf_r+0xc>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	6020      	str	r0, [r4, #0]
 80078ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078be:	81a3      	strh	r3, [r4, #12]
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078c6:	b15b      	cbz	r3, 80078e0 <__smakebuf_r+0x70>
 80078c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078cc:	4630      	mov	r0, r6
 80078ce:	f000 f81d 	bl	800790c <_isatty_r>
 80078d2:	b128      	cbz	r0, 80078e0 <__smakebuf_r+0x70>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	431d      	orrs	r5, r3
 80078e4:	81a5      	strh	r5, [r4, #12]
 80078e6:	e7cf      	b.n	8007888 <__smakebuf_r+0x18>

080078e8 <_fstat_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d07      	ldr	r5, [pc, #28]	@ (8007908 <_fstat_r+0x20>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	602b      	str	r3, [r5, #0]
 80078f6:	f7f9 f8f7 	bl	8000ae8 <_fstat>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	d102      	bne.n	8007904 <_fstat_r+0x1c>
 80078fe:	682b      	ldr	r3, [r5, #0]
 8007900:	b103      	cbz	r3, 8007904 <_fstat_r+0x1c>
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	bd38      	pop	{r3, r4, r5, pc}
 8007906:	bf00      	nop
 8007908:	20001bb4 	.word	0x20001bb4

0800790c <_isatty_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d06      	ldr	r5, [pc, #24]	@ (8007928 <_isatty_r+0x1c>)
 8007910:	2300      	movs	r3, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	f7f9 f8f6 	bl	8000b08 <_isatty>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_isatty_r+0x1a>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_isatty_r+0x1a>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	20001bb4 	.word	0x20001bb4

0800792c <_sbrk_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d06      	ldr	r5, [pc, #24]	@ (8007948 <_sbrk_r+0x1c>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	602b      	str	r3, [r5, #0]
 8007938:	f7f9 f8fe 	bl	8000b38 <_sbrk>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_sbrk_r+0x1a>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_sbrk_r+0x1a>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	20001bb4 	.word	0x20001bb4

0800794c <_init>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	bf00      	nop
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr

08007958 <_fini>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	bf00      	nop
 800795c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795e:	bc08      	pop	{r3}
 8007960:	469e      	mov	lr, r3
 8007962:	4770      	bx	lr
